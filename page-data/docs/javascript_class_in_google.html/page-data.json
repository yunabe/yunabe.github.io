{"componentChunkName":"component---src-templates-post-js","path":"/docs/javascript_class_in_google.html","webpackCompilationHash":"d26e3e4ee56b80f7c341","result":{"data":{"markdownRemark":{"html":"<p>他のメジャーなオブジェクト指向プログラミング言語と異なり JavaScript には「クラス」が存在しません。\n代わりに C++, Java などにはない <code>prototype</code> や C++, Java のとは全く異なる <code>new</code> 演算子や <code>this</code> が用意されています。\nこれらの機能は一見するとどれもかなり奇妙な仕様をしています。\nそのため、それぞれの機能の仕様を 1 つ 1 つ勉強しても一体全体何のためにそんな機能が用意されていて、\nどのようにその機能を活用してプログラムを作ればよいのか全く理解できないと思います。</p>\n<p>そのため C++, Java, Python\nなどの「まともな」オブジェクト指向プログラミング言語の経験のあるプログラマが\nJavaScript で大規模なプログラミングを書こうとすると\nクラスがないのにプログラムをどうやってモジュール化したらよいのか分からないし、\n代わりにある <code>this</code> とか <code>prototype</code>\nとかは何に使えばよいか分からないしで途方に暮れてしまうと思います。</p>\n<p>しかし JavaScript には「クラス」という言語仕様は用意されていないものの、<code>this</code>,\n<code>prototype</code> などを一定のルールに基づいて利用すれば\n他の言語のクラスほぼ同等のことは実現可能です。\nつまり他のクラスで行うようなクラスを使ったカプセル化、ポリモーフィズム、継承などを\nJavaScript でも実現することができます。 このドキュメントでは Google\nが公開している JavaScript のオープンソースライブラリ <a href=\"https://developers.google.com/closure/library/\">Google Closure\nLibrary</a>\nを参考にしてどのように JavaScript でクラスを実現すればよいかを学びます。</p>\n<h2 id=\"クラス実現のために必要な-javascript-の言語仕様\"><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E5%AE%9F%E7%8F%BE%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA-javascript-%E3%81%AE%E8%A8%80%E8%AA%9E%E4%BB%95%E6%A7%98\" aria-label=\"クラス実現のために必要な javascript の言語仕様 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>クラス実現のために必要な JavaScript の言語仕様</h2>\n<p>JavaScript でのクラスの実現方法を理解するためには <code>this</code>, <code>new</code>,\n<code>prototype</code>\nなどの JavaScript の特殊な言語仕様を理解している必要があります。\nまずはそうした JavaScript の言語仕様から復習しておきます。</p>\n<h3 id=\"function\"><a href=\"#function\" aria-label=\"function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function</h3>\n<p>JavaScript では <code>function</code> で関数を定義します。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>JavaScript\nにおける関数の定義方法を知らない場合はクラスの実現方法を学ぶ前に、まず\nJavaScript の入門書や\n<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions_and_function_scope\">関数と関数スコープ</a>\nなどを読んだほうがよいかと思います。ここでは詳細は省略します。</p>\n<h3 id=\"this\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this</h3>\n<p>JavaScript では <code>this</code> という特殊な変数が関数の中で利用可能です。\nJavaScript の this は <strong>Java, C++ の this とは全く挙動が異なる</strong>\nので注意してください。 JavaScript の <code>this</code>\nはある関数が呼び出された際にその関数を格納していた <code>object</code> を指します。\n例えば</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHelloShared</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, I'm \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>という関数があり、それが alice, bob というオブジェクトの <code>sayHello</code>\nとして登録されていたとします。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> alice <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  sayHello<span class=\"token punctuation\">:</span> sayHelloShared<span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> bob <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  sayHello<span class=\"token punctuation\">:</span> sayHelloShared<span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span>\n  child<span class=\"token punctuation\">:</span> alice\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これを</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">alice<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, I'm Alice</span>\nbob<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, I'm Bob</span></code></pre></div>\n<p>のように呼び出すと前者の場合では <code>this</code> は <code>alice</code> を, 後者の場合では\n<code>bob</code> を指すので それぞれの実行で <code>I'm Alice</code> と <code>I'm Bob</code>\nが表示されます。 また下の例のように <code>.</code> が複数存在する場合は <code>this</code>\nはその関数を直接格納していたオブジェクト <code>child</code> を参照します。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">bob<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, I'm Alice</span></code></pre></div>\n<p>なおクラスを実現する上ではあまり重要なことではないですが、 関数を単に\n<code>method();</code> という形で単体で実行した場合には <code>this</code> は <code>window</code>\nを指します。</p>\n<h3 id=\"call\"><a href=\"#call\" aria-label=\"call permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call</h3>\n<p>関数呼び出しの際に <code>this</code> の明示的に指定することも可能です。 それには\n<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">call</a>\nを利用します。 <code>call</code>\nは全ての関数が暗黙的に持っているプロパティで、関数として呼び出すことができます。\n<code>call</code> を呼ぶと <code>call</code> の第一引数として渡されたオブジェクトが <code>this</code>\nにセットされて元の関数が呼び出されます。\n第二引数移行は元の関数の引数として利用されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">sayHelloShared</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, I'm Alice</span>\n<span class=\"token function\">sayHelloShared</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello, I'm Bob</span></code></pre></div>\n<h3 id=\"new-演算子\"><a href=\"#new-%E6%BC%94%E7%AE%97%E5%AD%90\" aria-label=\"new 演算子 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>new 演算子</h3>\n<p>JavaScript にも <code>new</code> 演算子が存在します。 ただし JavaScript の new も\n<strong>Java や C++ でクラスのインスタンス化を行う new\nとは全く動きが異なります。</strong> C++, Java では <code>new</code>\nはクラスと共に利用しますが JavaScript の <code>new</code>\nは任意の関数と一緒に呼び出します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">new &lt;関数&gt;(&lt;引数&gt;);</code></pre></div>\n<p><code>new</code> と一緒に関数を呼び出すと、まず新しい空のオブジェクト (つまり <code>{}</code>)\nが生成されます。 次に関数が呼び出されますが、その際に関数内の <code>this</code>\nが生成されたオブジェクトを指すようになります。\n関数が実行された後、生成されたオブジェクトが <code>new</code>\nの実行結果として返されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> alice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>例えばこの例では、<code>new Person...</code>\nによって新しいオブジェクトが生成され、それが <code>this</code> に格納されて\n<code>Person</code> が実行され、 <code>name</code>, <code>age</code>\nがオブジェクトにセットされます。そして生成されたオブジェクトは <code>alice</code>\nに代入されます。 そのため、<code>alice.name</code>, <code>alice.age</code> は <code>Person</code>\nに渡された引数 <code>name</code>, <code>age</code> になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Alice</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span></code></pre></div>\n<p>もうお気づきのように、<code>new</code> 演算子を使うことで <code>JavaScript</code>\nでは関数を「コンストラクタ」として利用することができます。 実際 <code>new</code>\nで生成されたオブジェクトは <code>constructor</code>\nというプロパティで生成時に利用された関数への参照を保持しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"prototype-チェーン\"><a href=\"#prototype-%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3\" aria-label=\"prototype チェーン permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prototype チェーン</h3>\n<p>JavaScript のオブジェクトは基本的には key と value\nのペアを保持する単なるマップ (連想配列) です。 <code>obj['prop'] = value;</code>\nあるいは <code>obj.prop = value;</code>\nのようにキーと値のペアを代入するとオブジェクトが内部的に保持しているマップにキーと値が保存されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> alice <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token comment\">// 'name': 'Alice' と同義</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nalice<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// alice['age'] = 7; と同義</span></code></pre></div>\n<p>登録した値は <code>obj['prop']</code> あるいは <code>obj.prop</code>\nのように参照できます。参照されたキーが存在しない場合は <code>undefined</code>\nが返されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// alice['name'] と alice.name は同義</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Alice</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>これがオブジェクトの基本動作です。しかし実は参照されたプロパティをオブジェクトが持っていなかった場合に、\n他のオブジェクトからプロパティを探してきて参照するための仕組みが\nJavaScript には用意されています。 それがプロトタイプチェーン (prototype\nchain) と呼ばれるものです。</p>\n<p>JavaScript のオブジェクトは他のオブジェクトを プロトタイプ\nとして利用することができます。\nオブジェクのプロパティが参照された際、そのプロパティをオブジェクト自身が保持していない場合には代わりにプロトタイプのオブジェクトのプロパティが参照されます。\nまたプロトタイプのオブジェクトがそのプロパティを保持していない場合には、さらにプロトタイプのプロトタイプを参照します。\nこのようにプロトタイプとしてオブジェクトが鎖のように繋がれて、それが順々に参照されることからこの仕組は「プロトタイプチェーン」と呼ばれます。</p>\n<img src=\"https://docs.google.com/drawings/d/1CjtvTFiPYQOICdGHG5jw-Vbf3Kh360_bho2utbrzeLY/pub?w=683&h=171\" width=\"341\" height=\"85\">\n<p>なお <a href=\"http://www.ecma-international.org/ecma-262/5.1/\">JavaScript\nの仕様書</a> ではこの\nプロトタイプ を表す内部的なプロパティを obj[[Prototype]]\nのように記述します。\nただしこれは仕様書の中でのみ現れる表現であって、JavaScript\nのコードの中では利用できません。 JavaScript で <code>obj</code>\nのプロトタイプを参照するには <code>Object.getPrototypeOf(obj)</code> を使用します。\n逆に <code>obj</code> のプロトタイプとして <code>proto</code> を設定するには\n<code>Object.setPrototypeOf(obj, proto)</code> を利用します。</p>\n<p>一部の JavaScript エンジンでは [[Prototype]] に相当する <code>__proto__</code>という特殊なプロパティが用意されていて、\nこのプロパティを参照、設定することでオブジェクトのプロトタイプを参照、設定することができます。\n<del>ただしこれは<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\">非標準の機能であり廃止される予定</a>なので今後はあまり利用しないほうがよいでしょう。</del>\n<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\">ES6 で<strong>proto</strong>が標準になりました</a>。ただ下位互換性の観点からあまり推奨されないことには変わりないかと思います。</p>\n<h3 id=\"プロパティ-prototype\"><a href=\"#%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3-prototype\" aria-label=\"プロパティ prototype permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プロパティ: prototype</h3>\n<p>プロトタイプの設定の方法はもう 1 つ存在します。それが関数の <code>prototype</code>\nプロパティを使う方法です。 実は <code>function</code>\nで作られた関数オブジェクトには <code>prototype</code>\nというプロパティが存在し、空のオブジェクトが格納されています。\nそしてその関数が <code>new</code>\n演算子とともにコンストラクタとして実行された際に、<code>new</code>\nで作成されたオブジェクト（つまり関数内では <code>this</code> が表すオブジェクト)\nのプロトタイプとして関数の <code>prototype</code>\nプロパティのオブジェクトが設定されます。</p>\n<p>名前が非常に紛らわしいですが、 <strong>prototype\nはオブジェクトのプロトタイプを表すプロパティではありません</strong>。\n<code>prototype</code>\nプロパティは「そのオブジェクトがコンストラクタとして利用された際に作成される新しいオブジェクト」のプロトタイプを決めるものです。\nオブジェクトのプロトタイプを表すプロパティは <code>__proto__</code>\nあるいは言語仕様書で [[Prototype]] と表されるもので <code>prototype</code>\nプロパティとは異なります。\nここを勘違いしてしまうと混乱のもとになるので自分で図を書いたりコードを実行してよく違いを理解しておいて下さい。</p>\n<p>さてこの <code>prototype</code>\nというプロパティ、オブジェクトの直接のプロトタイプを表さないので一見非常に使いにくように思えます。\nしかしこの特殊な仕様が JavaScript\nでクラスを実現するにはとても重要になります。 実際、JavaScript\nでプロトタイプを利用する場合 <code>setPrototypeOf</code>\nよりもこちらを使うのが一般的です。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Constructor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Apple';</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Banana';</span></code></pre></div>\n<h2 id=\"google-closure-流のクラスの実現方法の概要\"><a href=\"#google-closure-%E6%B5%81%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9F%E7%8F%BE%E6%96%B9%E6%B3%95%E3%81%AE%E6%A6%82%E8%A6%81\" aria-label=\"google closure 流のクラスの実現方法の概要 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Google Closure 流のクラスの実現方法の概要</h2>\n<p>まずクラスの実現方法の例を示して、それから各要素について解説します。\nクラスの定義は次のような形になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// クラスとコンストラクタは関数を使って定義します</span>\n<span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this はインスタンスを表します。</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// メソッドはコンストラクタの prototype プロパティに定義します</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// メンバ変数の定義・参照は this.&lt;メンバ変数> を使います。</span>\n  <span class=\"token comment\">// C++, Java と違い this は省略できません。</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// メソッド内から他のメソッドを呼ぶ場合も this.&lt;メソッド> を使います。</span>\n  <span class=\"token comment\">// C++, Java と違い this は省略できません。</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello I'm \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>クラスをインスタンス化する際には <code>new</code> を使います。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> alice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nalice<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>継承は <code>inherits</code> という関数を用意して次のように行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">inherits</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childCtor<span class=\"token punctuation\">,</span> parentCtor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 子クラスの prototype のプロトタイプとして 親クラスの</span>\n  <span class=\"token comment\">// prototype を指定することで継承が実現される</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>childCtor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> parentCtor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 子クラスのコンストラクタ</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Employee</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> salary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 親クラスのコンストラクタの呼び出しには call を使用</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// inherits を使って親子関係を明示する</span>\n<span class=\"token function\">inherits</span><span class=\"token punctuation\">(</span>Employee<span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 子クラスのメソッド</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getSalary</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 同じ名前のメソッドを子クラスで定義すればオーバーライドになる。</span>\n<span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 親クラスのメソッドを呼び出す場合は親クラスの prototype に</span>\n  <span class=\"token comment\">// 定義されているメソッドを call を使って呼び出す。</span>\n  <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Salary is \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ではそれぞれの要素について解説していきましょう。</p>\n<h2 id=\"クラスの宣言とコンストラクタの定義\"><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%A3%E8%A8%80%E3%81%A8%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"クラスの宣言とコンストラクタの定義 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>クラスの宣言とコンストラクタの定義</h2>\n<p>上で述べたように <code>new</code>\n演算子をつかうと関数をクラスのコンストラクタのように利用することができます。\nそのため JavaScript\nでは関数を使ってクラスとコンストラクタを同時に定義します。\nクラスのインスタンスの生成とコンストラクタの呼び出しには <code>new</code>\n演算子を使います。 上述したように JavaScript の <code>new</code> と C++/Java の\n<code>new</code>\nの仕様は大きく異なりますが、結果的には似たような使い方をすることになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// クラス Person とそのコンストラクタを定義。インスタンス変数の設定にはコンストラクタ中で `this.` を使う。</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// コンストラクタの中身</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> alice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"メンバ変数-インスタンス変数\"><a href=\"#%E3%83%A1%E3%83%B3%E3%83%90%E5%A4%89%E6%95%B0-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0\" aria-label=\"メンバ変数 インスタンス変数 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メンバ変数 (インスタンス変数)</h2>\n<p>上の例で出てきているように、クラスの内部でメンバ変数を定義・参照するには\n<code>this.&#x3C;プロパティ名></code> を使います。 JavaScript では Java や C++ と違い\n<strong>this を省略することは不可能</strong> なので注意してください。 Python\nを知っている人は <code>this</code> は <code>self</code>\nに相当するものだと思うと分かりやすいかと思います。\nインスタンス変数やメソッド呼び出しの際に Python では <code>self</code>\nを付けなければならないように JavaScript では <code>this</code> が必ず必要です。</p>\n<h2 id=\"メソッド定義と呼び出し\"><a href=\"#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%AE%9A%E7%BE%A9%E3%81%A8%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\" aria-label=\"メソッド定義と呼び出し permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メソッド定義と呼び出し</h2>\n<p>JavaScript でメソッドを定義するときにはコンストラクタ関数の <code>prototype</code>\nオブジェクトに関数を定義します。\nまたメソッド内から他のメソッドの呼び出しを行う場合は\n<code>this.&#x3C;メソッド名>(引数)</code> を使います。\nメンバ変数の場合と同様に、メソッド呼び出しの際に <strong>this\nを省略することは不可能</strong> なので気をつけて下さい。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, I'm \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> alice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nalice<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>まず上述したように <code>alice</code> のコンストラクタ <code>Person</code> の <code>prototype</code>\nプロパティ <code>Person.prototype</code> が alice のプロトタイプとなります。 つまり\n<code>alice</code> に存在しないプロパティがアクセスされた場合、JavaScript は\n<code>Person.prototype</code> から同名のプロパティを探してきます。 そのため、\n<code>alice.sayHello</code> は <code>Person.prototype.sayHello</code>\nになります(プロトタイプチェーン)。 さらに JavaScript では <code>this</code>\nは関数が呼び出された際にその関数を保持していたオブジェクトがセットされるので、\n<code>alice.sayHello();</code> という形で <code>sayHello</code> を呼び出した際には <code>this</code> は\n<code>alice</code> となります。</p>\n<p>このように <code>prototype</code> と <code>this</code>\nの単体だと何のためにあるのか分からない奇妙な仕様がこのように。</p>\n<p>上のメソッド定義の例をみると <code>this</code> が <code>prototype</code>\nを指すのではないか？心配になるかもしれませんが前節で述べたように\nJavaScript の <code>this</code>\nは関数が呼び出された際にその関数をプロパティ保持していたオブジェクトを指します。そのため、\n<code>alice.sayHello();</code> という形で <code>sayHello</code> を呼び出した場合は <code>this</code> は\n<code>alice</code> を指すことになるのです。</p>\n<h3 id=\"private-protected\"><a href=\"#private-protected\" aria-label=\"private protected permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>private, protected</h3>\n<p>JavaScript でクラスを実現する場合、メンバ変数やメソッドを <code>private</code> や\n<code>protected</code> にすることはできません。 ただし名前規約で <code>private</code>\nなものを名前でわかりやすくして間違えてアクセスしないようにすることはできます。\n<a href=\"https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#Naming\">Google の JavaScript\nのスタイルガイド</a>\nでは private なメソッド, メンバ変数は名前の末尾に <code>_</code>\nをつけることが求められています。</p>\n<h2 id=\"継承\"><a href=\"#%E7%B6%99%E6%89%BF\" aria-label=\"継承 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>継承</h2>\n<h3 id=\"プロトタイプチェーンを利用してメソッドを親クラスから引き継ぐ\"><a href=\"#%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%97%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%8B%E3%82%89%E5%BC%95%E3%81%8D%E7%B6%99%E3%81%90\" aria-label=\"プロトタイプチェーンを利用してメソッドを親クラスから引き継ぐ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プロトタイプチェーンを利用してメソッドを親クラスから引き継ぐ</h3>\n<p>子クラスから親クラスのメソッドが引き継がれるようにするには、 子クラスの\n<code>prototype</code> にメソッドが見つからなかった場合に、親クラスの <code>prototype</code>\nに定義されてるメソッドが参照されれば良いので、 親クラスの <code>prototype</code>\nが子クラスの <code>prototype</code> のプロトタイプ (<code>__proto__</code>, あるいは\n[[Prototype]])になるようにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;figure&gt;</code></pre></div>\n<p>前述したように、<code>setPrototypeOf</code>\nであるオブジェクトを他のオブジェクトのプロトタイプに設定できるので、次のような継承用の関数を事前に用意しておきます。\n(Google Closure の実際の inherits は互換性のためにもう少し複雑です)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">inherits</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childCtor<span class=\"token punctuation\">,</span> parentCtor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>childCtor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> parentCtor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>子クラスのコンストラクタを定義した後に、 <code>inherits(Child, Parent);</code>\nのように呼び出して使います。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Parent のコンストラクタ実装</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method0</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Parent.method0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Child</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Child のコンストラクタの実装</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">inherits</span><span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">,</span> Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Child.method1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">method0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"親クラスのコンストラクタの呼び出し\"><a href=\"#%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\" aria-label=\"親クラスのコンストラクタの呼び出し permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>親クラスのコンストラクタの呼び出し</h3>\n<p>上の例ではコンストラクタが空だったので問題ありませんでしたが、\n現実のプログラムでは初期化を正しく行うためには子クラスのコンストラクタから\n親クラスのコンストラクタを呼びださなくてはなりません。</p>\n<p>親クラスのコンストラクタを呼び出す際には、親クラスのコンストラクタ内の\n<code>this</code> が子クラスのコンストラクタ内の <code>this</code> (つまり <code>new</code>\nで生成された初期化対象のインスタンス)\nになるようにしなくてはなりません。<code>this</code>\nを明示的に指定して関数を呼び出すには前述したように <code>call</code> を使います。\nそのため親クラスのコンストラクタの呼び出しは\n<code>Parent.call(this, 引数...)</code> のように行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Child</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"メソッドオーバーライドと親クラスのメソッドの呼び出し\"><a href=\"#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%89%E3%81%A8%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\" aria-label=\"メソッドオーバーライドと親クラスのメソッドの呼び出し permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メソッドオーバーライドと親クラスのメソッドの呼び出し</h3>\n<p>前述したように、<code>child.method0()</code> のようにメソッド呼び出しが行われると、\nJavaScript はまず <code>child</code> のプロトタイプである <code>Child.prototype</code> から\n<code>method</code> を探します。 <code>Child.prototype</code> に <code>method</code>\nが見つからない場合は、さらにプロトタイプチェーンをたどって\n<code>Parent.prototype</code> から <code>method</code> を探してきて呼び出します。</p>\n<p>仕組み上、<code>C++</code> のようにオーバーライドする関数に <code>virtual</code>\nなどの特殊な修飾子を付ける必要はありません。 また <code>Java</code>\nのようにメソッドに <code>final</code>\nをつけてオーバーライドを禁止することもできません。\n子クラスで同名のメソッドを定義されてしまえば問答無用でオーバーライドされてしまいます。\nこれは大規模なプログラムでは問題になってしまいますが、純粋な JavaScript\nでは解決する手段がありません。</p>\n<p>また親クラスのメソッドを明示的に呼び出すには、親クラスのコンストラクタの呼び出しの場合と同様に\n<code>call</code> を使用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"多重継承\"><a href=\"#%E5%A4%9A%E9%87%8D%E7%B6%99%E6%89%BF\" aria-label=\"多重継承 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多重継承</h3>\n<p>プロトタイプチェーンを利用している仕組み上、多重継承はできません。</p>\n<h3 id=\"abstract-interface\"><a href=\"#abstract-interface\" aria-label=\"abstract interface permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>abstract, interface</h3>\n<p>JavaScript には <code>interface</code> や <code>abstract</code>\nに相当する言語仕様は用意されていません。 Java, C++ の抽象メソッド\n(abstract method) はメソッドの実体は定義せずに、\n子クラスあるいはインターフェースを実装するクラスが実装しなくてはならないメソッドを宣言するものです。\nJava, C++ は静的型チェックを行うのでそのような仕組みが必須です。 しかし\nJavaScript\nは型は動的にチェックされるので抽象メソッドはなくてもプログラムを書くことは可能です。</p>\n<p>ただ現実にはプログラムの可読性を高めるために子クラスが実装しなくてはならないメソッドを明示的に書きたいと思うことも多いでしょう。\nJavaScript\nではそのような場合、単純に例外を投げるだけの関数を定義してしまいます。これは\nPython でも同じです。 Java の interface\nに相当することをしたい場合はすべてのメソッドが例外を投げるだけのクラスを作成すればよいでしょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not Implemented'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"inherits-の実際のコード\"><a href=\"#inherits-%E3%81%AE%E5%AE%9F%E9%9A%9B%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"inherits の実際のコード permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inherits の実際のコード</h2>\n<p>前述した継承用の関数 <code>inherits</code> は非常にシンプルでしたが、実際には\n<code>setPrototypeOf</code> が利用できない古いブラウザの互換性のために、\n同じことをもう少し複雑なコードで行う必要があります。 Google Closure の\n<a href=\"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2170\">base.js に定義されている\ngoog.inherits</a>\nはブラウザ互換性のために <code>setPrototypeOf</code>\nを使わず下のような少し複雑なコードになっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">goog<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">inherits</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childCtor<span class=\"token punctuation\">,</span> parentCtor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">/** @constructor \\*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">tempCtor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntempCtor<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> parentCtor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\nchildCtor<span class=\"token punctuation\">.</span>superClass\\_ <span class=\"token operator\">=</span> parentCtor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\nchildCtor<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tempCtor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @override \\*/</span>\nchildCtor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> childCtor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"良くないクラス実現方法\"><a href=\"#%E8%89%AF%E3%81%8F%E3%81%AA%E3%81%84%E3%82%AF%E3%83%A9%E3%82%B9%E5%AE%9F%E7%8F%BE%E6%96%B9%E6%B3%95\" aria-label=\"良くないクラス実現方法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>良くないクラス実現方法</h2>\n<p>メソッドの定義方法として、</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">sayHello</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getName</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ....</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>のように、<code>prototype</code>\nを新しいオブジェクトで置き換えてしまうコードが揚げられている場合がありますが、\nこの方法だと、そのクラスが他のクラスを継承している場合にプロトタイプチェーンが切れてしまって継承関係が失われてしまうので\n子クラスの定義では使えません。コードの一貫性を保つために、常に</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token regex\">/_..._/</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token regex\">/_..._/</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>のように１つずつメソッドを追加するスタイルのほうが好ましいかと思います。\nそれと多くの場合問題になりませんが、<code>prototype</code>\nを新しいオブジェクトで置き換えてしまうと、\n<code>Person.prototype.constructor == Person</code>\nの関係は壊れてしまうのでそこも若干マイナスポイントです。</p>\n<h2 id=\"es6-のクラス\"><a href=\"#es6-%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9\" aria-label=\"es6 のクラス permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6 のクラス</h2>\n<p><a href=\"javascript_class_es6.html\">ECMAScript 6 (ES6) でようやく JavaScript にもクラスの構文が追加されています</a>。数年後、ユーザが使っているブラウザの大半が ECMAScript 6 をサポートするようになれば(2015 年 10 月時点では最新の Firefox ではサポートされていない)、新規のプロジェクトや単なる趣味であればここに書かれている文法を直接使う必要はなくなると思います。\nただ下位互換性が非常に重要になる Closure Library のようなコアライブラリや既存のコード読む上で、あるいは<a href=\"https://github.com/google/traceur-compiler\">ES6 to ES5 converter</a>の出力をデバッグする上で、今後少なくとも数年はもここに書かれている手段への理解は必要となるかと思います。\nまた<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">ES6 のクラスがシンタックスシュガーに過ぎない</a>以上、ES6 のクラスの挙動をきちんと理解したければプロトタイプを使ってどのようにクラスが実現できるのかを理解しておくのは今後も重要だと思います。ES6 はあくまで既存の JavaScript の上に作られた言語であり、JavaScript がプロトタイプベースの言語であることは変わりません。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/docs/javascript_class_in_google.html/#%E3%82%AF%E3%83%A9%E3%82%B9%E5%AE%9F%E7%8F%BE%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA-javascript-%E3%81%AE%E8%A8%80%E8%AA%9E%E4%BB%95%E6%A7%98\">クラス実現のために必要な JavaScript の言語仕様</a></p>\n<ul>\n<li><a href=\"/docs/javascript_class_in_google.html/#function\">function</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#this\">this</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#call\">call</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#new-%E6%BC%94%E7%AE%97%E5%AD%90\">new 演算子</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#prototype-%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3\">prototype チェーン</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3-prototype\">プロパティ: prototype</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/javascript_class_in_google.html/#google-closure-%E6%B5%81%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9F%E7%8F%BE%E6%96%B9%E6%B3%95%E3%81%AE%E6%A6%82%E8%A6%81\">Google Closure 流のクラスの実現方法の概要</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%A3%E8%A8%80%E3%81%A8%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%AE%E5%AE%9A%E7%BE%A9\">クラスの宣言とコンストラクタの定義</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#%E3%83%A1%E3%83%B3%E3%83%90%E5%A4%89%E6%95%B0-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0\">メンバ変数 (インスタンス変数)</a></li>\n<li>\n<p><a href=\"/docs/javascript_class_in_google.html/#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%AE%9A%E7%BE%A9%E3%81%A8%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">メソッド定義と呼び出し</a></p>\n<ul>\n<li><a href=\"/docs/javascript_class_in_google.html/#private-protected\">private, protected</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/docs/javascript_class_in_google.html/#%E7%B6%99%E6%89%BF\">継承</a></p>\n<ul>\n<li><a href=\"/docs/javascript_class_in_google.html/#%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%97%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%8B%E3%82%89%E5%BC%95%E3%81%8D%E7%B6%99%E3%81%90\">プロトタイプチェーンを利用してメソッドを親クラスから引き継ぐ</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">親クラスのコンストラクタの呼び出し</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%89%E3%81%A8%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">メソッドオーバーライドと親クラスのメソッドの呼び出し</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#%E5%A4%9A%E9%87%8D%E7%B6%99%E6%89%BF\">多重継承</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#abstract-interface\">abstract, interface</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/javascript_class_in_google.html/#inherits-%E3%81%AE%E5%AE%9F%E9%9A%9B%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89\">inherits の実際のコード</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#%E8%89%AF%E3%81%8F%E3%81%AA%E3%81%84%E3%82%AF%E3%83%A9%E3%82%B9%E5%AE%9F%E7%8F%BE%E6%96%B9%E6%B3%95\">良くないクラス実現方法</a></li>\n<li><a href=\"/docs/javascript_class_in_google.html/#es6-%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9\">ES6 のクラス</a></li>\n</ul>","frontmatter":{"title":"Google 流 JavaScript におけるクラス定義の実現方法","lastmod":"2016-05-08T00:00:00.000Z","enable_toc":true},"fields":{"slug":"/docs/javascript_class_in_google.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/javascript_class_in_google.html"}}}