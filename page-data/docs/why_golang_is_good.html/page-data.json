{"componentChunkName":"component---src-templates-post-js","path":"/docs/why_golang_is_good.html","webpackCompilationHash":"d26e3e4ee56b80f7c341","result":{"data":{"markdownRemark":{"html":"<p>結論としてはGo言語には以下のようないくつかの長所があり、現実路線で非常にバランスがとれた言語だと思います。\nこれらの長所のために失われたメリットも当然いくつもありますが、一定程度以上の規模のプロジェクトで利用する言語の選択肢としては現存するプログラミング言語の中では一番か二番目によいのではないかと思います。</p>\n<ul>\n<li>コンパイルが速い (vs. C++)</li>\n<li>GCとメモリ安全性 (vs. C++)</li>\n<li>妥当で現実的なレベルの型安全性 (vs. Python/Ruby)</li>\n<li>\n<p>実行時パフォーマンスが良さ (vs. Python/Ruby)</p>\n<ul>\n<li>現実問題、ある程度の規模と期間のプロジェクトになると型検証があるとリファクタリングなどがだいぶ楽になるのでありがたい。</li>\n<li>型があるので自然と実行時パフォーマンスも良い</li>\n</ul>\n</li>\n<li>\n<p>標準ライブラリが整備されている (vs. C++)</p>\n<ul>\n<li>むしろ標準ライブラリにjsonのparserすら存在しないC++がおかしい...</li>\n</ul>\n</li>\n<li>\n<p>シンプルでバランスの取れた言語仕様。習得が比較的容易 (vs. C++, Haskell, その他多くの言語)</p>\n<ul>\n<li>すでに１つ手続き型言語をそれなりに使えている人ならば、軽く仕様を読めば何となく使えてしまえると思います。</li>\n<li><a href=\"golang_pitfall.html\">ただ他のメジャーな手続き型言語との違いから来るはまりどころが幾つかある</a>のできちんと理解するのはそれなりに労力は必要。</li>\n<li>とはいえC++とかHaskellよりは確実に簡単だと思う。</li>\n</ul>\n</li>\n<li>\n<p>非知的なプログラマのためにデザインされている。</p>\n<ul>\n<li>言語デザインとして正しく使うのが難しい、乱用するとプログラムを無意味に複雑にしてしまう機能が排除されている。</li>\n<li>高度な型システム・継承・Generics・例外・イベントモデルによる並行処理など。</li>\n<li>面白みに欠くプログラミング言語である。そのようにデザインされている。</li>\n</ul>\n</li>\n<li>\n<p>スレッドモデルによる並行プログラミング (vs. Node.js)</p>\n<ul>\n<li>一時期Node.jsなどでイベントモデルによるプログラミングが何故かもてはやされていましたが、<a href=\"why_events_are_a_bad_idea.html\">人類にはイベントモデルは無意味に難しすぎます</a>。</li>\n<li>百害あって一利ぐらいしかない。</li>\n<li>ようやくJavaScriptですらasync awaitによるスレッドモデルへの回帰がみられる。</li>\n<li>言語標準の方法としてgoroutineを使ったスレッドモデルによる並行処理が強く推奨されているのは素晴らしいデザインだと思います。</li>\n<li>イベントモデル vs スレッドモデルの不毛な論争をさけることができる。</li>\n</ul>\n</li>\n<li>Dockerなどの素晴らしい大規模プロジェクトでの実績がある。</li>\n<li>\n<p>実行環境としてJVMやインタープリタを必要としないのでデプロイが軽量で済むし、比較的容易である。</p>\n<ul>\n<li>純粋にGoで書かれた(<a href=\"https://golang.org/cmd/cgo/\"><code>cgo</code></a>を使っていない)プログラムであれば<code>CGO_ENABLED=0</code>と一緒にコンパイルすると生成されるプログラムは静的リンクされたものとなる。</li>\n<li>単一ファイルをデプロイするだけでよいのでデプロイが容易。</li>\n<li>とはいえ仮想マシンやコンテナで環境をまるごとデプロイする既存の技術が発達している現在では容易さによるメリットは限定的。</li>\n<li>実行に必要となるものが少ないので仮想マシンやコンテナのサイズは小さくて済むのでデプロイはその分軽量になる。</li>\n<li>例えば<a href=\"https://github.com/yunabe/codelab/tree/master/docker/simpleserver\">DockerのAlpineイメージと組み合わせて20~30MB程度の軽量なDockerコンテナでデプロイができます。</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"シンプルでバランスの取れた言語仕様\"><a href=\"#%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%A7%E3%83%90%E3%83%A9%E3%83%B3%E3%82%B9%E3%81%AE%E5%8F%96%E3%82%8C%E3%81%9F%E8%A8%80%E8%AA%9E%E4%BB%95%E6%A7%98\" aria-label=\"シンプルでバランスの取れた言語仕様 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>シンプルでバランスの取れた言語仕様</h2>\n<ul>\n<li>\n<p><a href=\"https://golang.org/ref/spec\">仕様は比較的シンプルである</a>。</p>\n<ul>\n<li>すべて読むのにそれほど多くの時間は必要ない。</li>\n</ul>\n</li>\n<li>C++やHaskellに比べれば遥かに習得が容易である。\nすでに手続き型言語を１つでも使いこなせるプログラマならば軽く仕様を眺めればすぐに何となく使えるようになるであろう。\nただしそれでもはまりどころはいくつもあるので</li>\n<li>いくつかの\"クール\"な言語機能がGo言語 (golang) ではサポートされて<strong>いない</strong>。代表的なものは\n「例外」、「Generics (template)」、「継承」</li>\n<li><a href=\"golang_pitfall.html\">ただ他のメジャーな手続き型言語との違いから来るはまりどころが幾つかある</a>のできちんと理解するのはそれなりに労力は必要ではある点は注意。</li>\n</ul>\n<h2 id=\"なぜgoは悪い言語なのか\"><a href=\"#%E3%81%AA%E3%81%9Cgo%E3%81%AF%E6%82%AA%E3%81%84%E8%A8%80%E8%AA%9E%E3%81%AA%E3%81%AE%E3%81%8B\" aria-label=\"なぜgoは悪い言語なのか permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>なぜGoは\"悪い\"言語なのか</h2>\n<p><a href=\"https://github.com/ksimka/go-is-not-good\">Goに対する批判は数多く存在します</a>。それのどれにもきちんとした理由はあると思います。主な批判は大きく</p>\n<ul>\n<li>Generics (template) がない</li>\n<li>継承がない</li>\n<li>例外がない。まるで1970年代に設計されたかのようである。</li>\n<li>非知的なプログラマのためにデザインされている。</li>\n</ul>\n<p>に集約されるように思います。</p>\n<h2 id=\"generics-templateがない\"><a href=\"#generics-template%E3%81%8C%E3%81%AA%E3%81%84\" aria-label=\"generics templateがない permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generics (template)がない</h2>\n<p><a href=\"https://golang.org/doc/faq#generics\">Go言語(golang)にはGenericsはありません</a>。\n<a href=\"https://docs.oracle.com/javase/tutorial/java/generics/types.html\">JavaのGeneric Types</a>とか<a href=\"https://ja.wikipedia.org/wiki/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)\">C++のテンプレート</a>で書けるようなことはGoでは書けません。\nただ配列(スライス), mapについては特別に言語でサポートされているのでJavaやC++で総称型を使うケースの9割ぐらいはカバーされるとは思います。Java1.5より前のJavaのように連想配列や可変長配列を使うのに常にキャストが必要になったりはしません。そのためGenericsがサポートされていないことはそれほど大きな問題にはなりません。</p>\n<p><a href=\"https://golang.org/doc/faq#generics\">上述のFAQ</a>にかかれている通り、GenericsをサポートしないことによってGo(golang)の型システムはシンプルに保たれています。\nC++のテンプレートの意味不明なコンパイルエラーに悩まされることはGo言語(golang)ではありません。\nまたGenericsも継承と同じように本来使われるべきでない場所で乱用される言語機能の１つだと思います。Go/Javaのinterfaceに相当するもので十分なものに無意味にGenerics (template)が使われていて保守性・可読性の低いコードは特にC++でよく見かけます。そのためカスタムのコンテナを定義するのにGenericsがないのは不便だけれど、Genericsが存在することで生じる複雑性や乱用による不利益を避ける方を選んだのは悪いことではなかったと思います。</p>\n<p>一方で、mapと配列以外のカスタムのコンテナが使いたい時にはGenericsがないのは不便なのも確かなので、将来うまい落とし所がみつかることを期待したいです<a href=\"https://golang.org/doc/faq#generics\"><em>(Generics may well be added at some point.)</em></a>。\n現時点でどうしてもGenericsのようなことがやりたければ、<code>go generate</code>でコードを自動生成するのも１つの手ではあります。あまり多用しすぎない方がよいのかなとは思いますが。</p>\n<h2 id=\"継承がない\"><a href=\"#%E7%B6%99%E6%89%BF%E3%81%8C%E3%81%AA%E3%81%84\" aria-label=\"継承がない permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>継承がない</h2>\n<p><a href=\"https://golang.org/doc/faq#inheritance\">Goには継承はありません</a>。\n<a href=\"https://en.wikipedia.org/wiki/Composition_over_inheritance\">そもそも継承はプログラミング言語にあまり必要ない機能だと思います</a>。\n継承が本当に有益なこともありますが、経験上大半のケースでは設計を手抜きするために継承が使われていて、結果長い目で見た際のreadabilityやmaintainabilityが著しく劣化してしまっていることが多いと思います。<a href=\"https://en.wikipedia.org/wiki/Composition_over_inheritance\">Composition over inheritance</a>や<a href=\"https://ja.wikipedia.org/wiki/%E3%83%AA%E3%82%B9%E3%82%B3%E3%83%95%E3%81%AE%E7%BD%AE%E6%8F%9B%E5%8E%9F%E5%89%87\">リスコフの置換原則</a>のような基本的な原則が守られておらず(そもそも多くの人は名前すら知らない)、単に一部のコードをクラス間で共有するために継承が使われていて可読性が著しく低いコードもよく目にします。</p>\n<p>そのため、そもそもプログラミング言語が継承をサポートしないというのは非常に良いデザインだなと思います。継承が非常に有益な場合も稀にあるもの分かりますが、大規模プロジェクトにおいては正しく使われない害のほうが確実に大きいです。</p>\n<h2 id=\"errors-as-values-例外が推奨されない\"><a href=\"#errors-as-values-%E4%BE%8B%E5%A4%96%E3%81%8C%E6%8E%A8%E5%A5%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\" aria-label=\"errors as values 例外が推奨されない permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Errors as values (例外が推奨されない)</h2>\n<p><a href=\"https://golang.org/doc/faq#exceptions\">Go言語のFAQにあるように、Goには例外がありません</a>。panic, recoverで例外と同じようなことはできますが、Javaの例外のように気軽に使ってはなりません。個人的にはこのFAQにかかれていることには概ね同意します。\n例外で返されたエラーを <code>try {...} catch (Exception e) {...}</code> みたいに処理しないといけないのは無意味に複雑なように思います。\nそれだけならよいですが、例外が発生するとコードが想定外の順序で実行されて困ったり、何故かこのコードが実行されないなと思ったら、その前に例外で大域脱出していて、しかもその例外が予想外のところでcatchされ握りつぶされていたり、と例外を大規模なプロジェクトの中で正しく扱うのは中々に困難だと思います。\nGoの例外は極力使わず、エラーを値として扱うポリシーはよいもの(特に大規模なプロジェクトで、エラーハンドリングが大切なプロジェクトでは)だと思います。</p>\n<p>ただ一方で、ちょっとした使い捨ての便利ツールを書く場合や、とりあえずプロトタイプで正常系だけ書きたい時、\nあるいは異常が発生したらプログラムを停止してしまって良いような起動時の初期化処理を書く時には、正直Goのエラーハンドリングはかなり面倒くさいです。\nこういうタイプのコードでは外部ライブラリの呼び出しやファイル、データベースなどの外部リソースへのアクセスが大きな割合を占めます。そして、そうした処理はほとんどの場合 error が発生しうるのでそれぞれの処理に対してエラーハンドリングを行う必要があります。\n場合によってはコードのかなりの割合の行が</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>の繰り返しで占められてしまうこともあるでしょう。これに対しては根本的な解決策はないように思います。エラーが発生した場合はエラーメッセージを出力して処理を中断してしまって問題ない</p>\n<ul>\n<li>使い捨てあるいは内部ツールで開発者・利用者の数が数人でエラーハンドリングがあまり重要ではない時</li>\n<li>正常系だけとりあえずプロトタイプしたい時</li>\n</ul>\n<p>には例外の方が便利であり、正直Go言語ではあまり効率的にコードが書けないような気がします。個人的にはそういう用途にはPythonなどを使うのが正しい解決策のように思えます。何でもGoで書く必要はないのですから。\n型の存在すら簡単なプロトタイピングをするのには少し鬱陶しいですしどんな言語も適材適所だと思います。</p>\n<h2 id=\"非知的なプログラマのためにデザインされている-designed-for-non-intelligent-programmers\"><a href=\"#%E9%9D%9E%E7%9F%A5%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B-designed-for-non-intelligent-programmers\" aria-label=\"非知的なプログラマのためにデザインされている designed for non intelligent programmers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>非知的なプログラマのためにデザインされている (Designed for non-intelligent programmers)</h2>\n<p><a href=\"http://nomad.so/2015/03/why-gos-design-is-a-disservice-to-intelligent-programmers/\">Goは知的でないプログラマのためにデザインされていると批判されることがあります</a>。そして「知的でないプログラマ」のためにデザインされているというのは指摘自体は正しいと思います。実際Rob Pikeも<a href=\"https://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2014/From-Parallel-to-Concurrent\">From Parallel to Concurrent</a>の20:40~で次のように述べています</p>\n<blockquote>\n<p>The key point here is our programmers are Googlers, they’re not researchers.\nThey’re typically, fairly young, fresh out of school, probably learned Java, maybe learned C or C++, probably learned Python.\nThey’re not capable of understanding a brilliant language but we want to use them to build good software.\nSo, the language that we give them has to be easy for them to understand and easy to adopt.</p>\n</blockquote>\n<p>要するにGoogle社員のような、研究者ではなく大学を出たばかりでC++, Java, Pythonの経験しかない「素晴らしいプログラミング言語」を理解する能力が欠けているエンジニアでも簡単に理解し、大きなシステムを構築するのに使えるようにGo言語はデザインされているのです。</p>\n<p>Goは言語デザインとして正しく使うのが難しい、乱用するとプログラムを無意味に複雑にしてしまう機能が排除されています(高度な型システム・継承・Generics・例外・イベントモデルによる並行処理など)。\nそのため、ある意味ではGoは「知的な」プログラマにとっては面白みに欠く言語だと思います。実際、Goを勉強しても概念的には目新しいものはなくて勉強することそのもので何かが学べるとは僕は全く思いません。\n一方でプログラミング言語を習得することのゴールは、それを使って何か大規模なソフトウェアをチームで作ることであるのだと思います。\nチームで大規模なソフトウェアを開発することはそれ自体が非常に難しいことです。そのゴールのためにプログラミング言語自体はシンプルに保ち、それ以外の部分により多くの労力をさけるようにするというのは僕は正しい判断だと思います。</p>\n<h2 id=\"golang-関連記事\"><a href=\"#golang-%E9%96%A2%E9%80%A3%E8%A8%98%E4%BA%8B\" aria-label=\"golang 関連記事 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>golang 関連記事</h2>\n<ul>\n<li>\n<p><a href=\"golang_pitfall.html\">Go言語(Golang) はまりどころと解決策</a></p>\n<ul>\n<li>僕がGoを使い始めたときにはまったところをまとめてあります。\nC++, C#, Java, Pythonなどの経験者がGoを始めるときに、気をつけておくとよいなと思った点がまとめてあります。\n僕と同じ間違えをして時間を無駄にする人が少しでも減るとうれしい。</li>\n</ul>\n</li>\n<li>\n<p><a href=\"easycsv_golang.html\">easycsv - Go言語 (golang) でcsvを手軽に扱うためのライブラリ</a></p>\n<ul>\n<li><code>reflect</code>の勉強を兼ねて作った標準の<code>encoding/csv</code>より高機能なcsvライブラリ。</li>\n</ul>\n</li>\n<li>\n<p><a href=\"golang_io.html\">Go言語(Golang) ファイル・I/O関係のよく使う基本ライブラリ</a></p>\n<ul>\n<li>Go言語でプログラムを書く際に欠かせないファイルなどの入出力(IO)関係の基本的なライブラリの一覧。この辺のライブラリはかなりよく使うのでパッケージ名や型名を覚えておくといちいちドキュメントを検索せずにすんで良いかも。</li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/docs/why_golang_is_good.html/#%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%A7%E3%83%90%E3%83%A9%E3%83%B3%E3%82%B9%E3%81%AE%E5%8F%96%E3%82%8C%E3%81%9F%E8%A8%80%E8%AA%9E%E4%BB%95%E6%A7%98\">シンプルでバランスの取れた言語仕様</a></li>\n<li><a href=\"/docs/why_golang_is_good.html/#%E3%81%AA%E3%81%9Cgo%E3%81%AF%E6%82%AA%E3%81%84%E8%A8%80%E8%AA%9E%E3%81%AA%E3%81%AE%E3%81%8B\">なぜGoは\"悪い\"言語なのか</a></li>\n<li><a href=\"/docs/why_golang_is_good.html/#generics-template%E3%81%8C%E3%81%AA%E3%81%84\">Generics (template)がない</a></li>\n<li><a href=\"/docs/why_golang_is_good.html/#%E7%B6%99%E6%89%BF%E3%81%8C%E3%81%AA%E3%81%84\">継承がない</a></li>\n<li><a href=\"/docs/why_golang_is_good.html/#errors-as-values-%E4%BE%8B%E5%A4%96%E3%81%8C%E6%8E%A8%E5%A5%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\">Errors as values (例外が推奨されない)</a></li>\n<li><a href=\"/docs/why_golang_is_good.html/#%E9%9D%9E%E7%9F%A5%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B-designed-for-non-intelligent-programmers\">非知的なプログラマのためにデザインされている (Designed for non-intelligent programmers)</a></li>\n<li><a href=\"/docs/why_golang_is_good.html/#golang-%E9%96%A2%E9%80%A3%E8%A8%98%E4%BA%8B\">golang 関連記事</a></li>\n</ul>","frontmatter":{"title":"なぜGo言語 (golang) はよい言語なのか・Goでプログラムを書くべき理由","lastmod":"2017-07-01T00:00:00.000Z","enable_toc":true},"fields":{"slug":"/docs/why_golang_is_good.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/why_golang_is_good.html"}}}