{"componentChunkName":"component---src-templates-post-js","path":"/docs/cpp_virtual_destructor.html","webpackCompilationHash":"d26e3e4ee56b80f7c341","result":{"data":{"markdownRemark":{"html":"<p><a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml\">Google C++ Style Guide</a>にも書かれているように、クラスに仮想メンバー関数が存在する場合、そのクラスのデストラクタは virtual でなくてはなりません\n(<a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Inheritance#Inheritance\">If your class has virtual methods,\nits destructor should be virtual.</a>)。\nただその理由は若干複雑です。理由が説明できないとコードレビューで問題を指摘する際に困りますし、逆に必要ないのに <a href=\"#others\">「デストラクタには常に virtual をつけろ」</a>と言われた場合に反論できなくて困ることになります。</p>\n<h2 id=\"ルールの前提\"><a href=\"#%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AE%E5%89%8D%E6%8F%90\" aria-label=\"ルールの前提 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ルールの前提</h2>\n<h3 id=\"virtual-なメソッドがあるなら、子クラスのポインタは必ず親クラスのポインタとして使用される\"><a href=\"#virtual-%E3%81%AA%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%8C%E3%81%82%E3%82%8B%E3%81%AA%E3%82%89%E3%80%81%E5%AD%90%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%AF%E5%BF%85%E3%81%9A%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A8%E3%81%97%E3%81%A6%E4%BD%BF%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8B\" aria-label=\"virtual なメソッドがあるなら、子クラスのポインタは必ず親クラスのポインタとして使用される permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>virtual なメソッドがあるなら、子クラスのポインタは必ず親クラスのポインタとして使用される</h3>\n<p>そもそも virtual なメソッド (仮想メンバー関数)がクラスに定義されているということは、そのクラスは継承した子クラスを作成し、その子クラスのインスタンスは親クラスのポインタに格納して利用するはずです(ポリモーフィズム) 。\nそうでないならば、メソッドを virtual にする意義がそもそもありません。 virtual なメソッドがクラス定義されていると、<a href=\"https://www.google.co.jp/search?q=vtable&#x26;hl=ja\">vtable</a>\nへのポインタの分だけインスタンスのサイズが増えますし virtual\nなメソッドの呼び出しは vtable を利用する分遅くなります。\nそのためプリモーフィズムを利用しないクラスであれば、不必要に virtual\nをつけるべきではないでしょう。</p>\n<h3 id=\"子クラスのポインタを親クラスのポインタにキャストして使用するならデストラクタが-virtual-でなくてはならない\"><a href=\"#%E5%AD%90%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%92%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%AB%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%97%E3%81%A6%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89%E3%83%87%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%8C-virtual-%E3%81%A7%E3%81%AA%E3%81%8F%E3%81%A6%E3%81%AF%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84\" aria-label=\"子クラスのポインタを親クラスのポインタにキャストして使用するならデストラクタが virtual でなくてはならない permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>子クラスのポインタを親クラスのポインタにキャストして使用するならデストラクタが virtual でなくてはならない</h3>\n<p>言い換えると、デストラクタが virtual\nでない場合、子クラスのポインタを親クラスのポインタにキャストして使用してはいけません。\nなぜならデストラクタが virtual でない場合、親クラスの型のポインタを\n<code>delete</code> した際には親クラスのデストラクタしか呼ばれないからです。\nたとえ親クラスの型のポインタが指している実体が子クラスだったとしても子クラスのデストラクタ\n(これは暗黙的に親クラスのデストラクタを呼ぶ) は呼び出されません。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// ~Parent is not virtual.</span>\nParent<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">delete</span> parent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this always calls ~Parent(); ~Child() is never called.</span></code></pre></div>\n<p>このコードでは <code>Child</code> のデストラクタが呼び出されないので Child\nのリソースの解放が行われません。 もちろん <code>delete parent;</code>\nを呼ばなければ問題は起こらないので、 <code>delete parent;</code>\nしないように気をつけていれば Child のポインタを Parent*\nに代入すること自体は問題ないが、\n間違えやすい上に間違えた場合にはメモリーリーク系の厄介なバグの原因になるので\n親クラスのポインタにキャストすること自体を避けるべきです。</p>\n<p>なお、暗黙的に作られるデストラクタは virtual\nではないのでデストラクタが空の場合でも virtual\nなデストラクタを明示的に定義しなくてならない点に気をつけて下さい:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">// 例えデストラクタが空でも</span>\n<span class=\"token comment\">// virtual なデストラクタは明示的に定義する</span>\n<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"結論\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>上で述べた 2 つの前提</p>\n<ul>\n<li>virtual\nなメソッドを持つクラスは、その子クラスのポインタを親クラスのポインタとして必ず利用するが、</li>\n<li>子クラスを親クラスのポインタとして利用する場合、デストラクタは\nvirtual でなくてはならない</li>\n</ul>\n<p>から <strong>「virtual なメソッドを持つクラスのデストラクタは virtual\nでなくてはならない」</strong> というルールが必要であることが分かります。</p>\n<h2 id=\"others\"><a href=\"#others\" aria-label=\"others permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おまけ: 派生系のルール</h2>\n<p>「C++では常にデストラクタは virtual にすべき」というルールでないのは\nvirtual 関数は vtable を使用するため、\nvirtual のデストラクタは呼び出しが若干遅くなるのと、 virtual\nがあることでインスタンスのサイズが vtable\nへのポインタ分増えてしまい無駄だからです。そもそも\n<a href=\"http://www.stroustrup.com/bs_faq2.html#virtual-dtor\">デストラクタがデフォルトで virtual\nでないのは意図的なものです</a>。\nしかし多くのプログラムではこの 2 つによるパフォーマンスの劣化はそれほど深刻にはならないと思いますし、\nその点を理解した上で「常にデストラクタを virtual にする」というシンプルで覚えやすいルールで運用するのはありえなくはないかと思います。\nでもそういうプログラムでは C++をそもそも使わないかもしれません。</p>\n<p>また「継承される可能性のあるクラスのデストラクタは virtual\nにすべき」というルールが書かれていることもありますが、\nこのルールだと継承はするけれど、親クラスのポインタへのキャストをしない場合には\nvirtual をつけることで無駄なコストが発生してしまいます。\n一方で、このルールのほうが virtual なメソッドは無い\n(ポリモフィズムは使わない)\nが子クラスのポインタを親クラスのポインタとして利用することはある場合\n(あまりないと思うが) にも対応できるので 優れているとも言える。\nいずれにせよ現実には、継承は多くの場合ポリモフィズムとセットで利用されるので、\n「継承される可能性のあるクラス」と「virtual\nなメソッドを持つクラス」は同義である場合が多いかと思いますし、\n個人的には 「継承される可能性のあるクラスのデストラクタは virtual\nでなくてはならない」と 「virtual なメソッドを持つクラスのデストラクタは\nvirtual でなくてはならない」は 実用上は差はないかと思います。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/docs/cpp_virtual_destructor.html/#%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AE%E5%89%8D%E6%8F%90\">ルールの前提</a></p>\n<ul>\n<li><a href=\"/docs/cpp_virtual_destructor.html/#virtual-%E3%81%AA%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%8C%E3%81%82%E3%82%8B%E3%81%AA%E3%82%89%E3%80%81%E5%AD%90%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%AF%E5%BF%85%E3%81%9A%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A8%E3%81%97%E3%81%A6%E4%BD%BF%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8B\">virtual なメソッドがあるなら、子クラスのポインタは必ず親クラスのポインタとして使用される</a></li>\n<li><a href=\"/docs/cpp_virtual_destructor.html/#%E5%AD%90%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%92%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%AB%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%97%E3%81%A6%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89%E3%83%87%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%8C-virtual-%E3%81%A7%E3%81%AA%E3%81%8F%E3%81%A6%E3%81%AF%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84\">子クラスのポインタを親クラスのポインタにキャストして使用するならデストラクタが virtual でなくてはならない</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/cpp_virtual_destructor.html/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/docs/cpp_virtual_destructor.html/#others\">おまけ: 派生系のルール</a></li>\n</ul>","frontmatter":{"title":"C++ でデストラクタを virtual にしなくてはならない条件と理由","lastmod":"2015-11-01T00:00:00.000Z","enable_toc":null},"fields":{"slug":"/docs/cpp_virtual_destructor.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/cpp_virtual_destructor.html"}}}