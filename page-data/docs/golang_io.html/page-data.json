{"componentChunkName":"component---src-templates-post-js","path":"/docs/golang_io.html","result":{"data":{"markdownRemark":{"html":"<p>Go 言語でプログラムを書く際に欠かせないファイルなどの入出力(IO)関係の基本的なライブラリの一覧。この辺のライブラリはかなりよく使うのでパッケージ名や型名を覚えておくといちいちドキュメントを検索せずにすんで良いかも。</p>\n<h2 id=\"備忘用早見表\" style=\"position:relative;\"><a href=\"#%E5%82%99%E5%BF%98%E7%94%A8%E6%97%A9%E8%A6%8B%E8%A1%A8\" aria-label=\"備忘用早見表 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>備忘用早見表</h2>\n<ul>\n<li>\n<p>io.Reader</p>\n<ul>\n<li>全ての Read 処理の基本となる interface。<code>Read(p []byte) (n int, err error)</code>を持つ。ただ Read を直接扱うことは少ない</li>\n</ul>\n</li>\n<li>\n<p>io.Writer</p>\n<ul>\n<li>全ての Write 処理の基本となる interface。<code>Write(p []byte) (n int, err error)</code>を持つ。ただ Write を直接扱うことは少ない</li>\n</ul>\n</li>\n<li>\n<p>os.Open</p>\n<ul>\n<li>読み込み用にファイルを開く。*os.File を返す。*os.File は io.Reader, io.Writer として利用できる。</li>\n</ul>\n</li>\n<li>\n<p>os.Create</p>\n<ul>\n<li>書き込み用にファイルを開く。*os.File を返す。</li>\n</ul>\n</li>\n<li>\n<p>os.Stdin, os.Stdout, os.Stderr</p>\n<ul>\n<li>標準入力、標準出力、標準エラー。*os.File 型</li>\n</ul>\n</li>\n<li>\n<p>bytes.Buffer (struct)</p>\n<ul>\n<li>ファイルではなくメモリへデータを書き込むのに使う。*bytes.Buffer が io.Writer として利用可能。</li>\n</ul>\n</li>\n<li>\n<p>bytes.Reader (struct)</p>\n<ul>\n<li>ファイルではなくメモリ([]byte)からデータを読み込むのに使う。*bytes.Reader が io.Reader として利用可能。</li>\n</ul>\n</li>\n<li>\n<p>bufio.Scanner</p>\n<ul>\n<li>ファイルや標準入力から作られた io.Reader から１行ずつ文字列を読み込む。</li>\n</ul>\n</li>\n<li>\n<p>io/ioutil.ReadAll</p>\n<ul>\n<li>io.Reader から全てデータを読み込んで[]byte を作成する。string にしたい場合は<code>string(b)</code>で型変換する。</li>\n</ul>\n</li>\n<li>\n<p>io/ioutil.ReadFile</p>\n<ul>\n<li>指定されたファイル名から全てのデータを読み込んで[]byte を作成する。string にしたい場合は<code>string(b)</code>で型変換する。</li>\n</ul>\n</li>\n<li>\n<p>io/ioutil.WriteFile</p>\n<ul>\n<li>指定されたファイル名に[]byte を書き込む。os.Create に合わせるなら第三引数<code>perm</code>は<code>0666</code>を渡す。</li>\n</ul>\n</li>\n<li>\n<p>io.Copy</p>\n<ul>\n<li>io.Reader から io.Writer にデータを全てコピーする便利関数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ioreader-iowriter\" style=\"position:relative;\"><a href=\"#ioreader-iowriter\" aria-label=\"ioreader iowriter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>io.Reader, io.Writer</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Writer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ファイルの読み書きなど入出力の基本となるインターフェイスです。バイト列([]byte)を読み書きするためのメソッド<code>Read</code>, <code>Write</code>を提供します。\nファイルや標準入出力、pipe などのデータの読み書きをする関数を定義する場合は<code>io.Reader</code>か<code>io.Writer</code>を引数で受け取ります。\nただ<code>Read</code>, <code>Write</code>はとても primitive なメソッドでそのままでは扱いづらいので多くの場合は<code>Read</code>, <code>Write</code>を直接は呼び出さず、\n標準ライブラリに用意されている便利なツールでラップして呼び出すことが多いと思います。\nReader から全ての内容を１つの<code>string</code>として読み込んだり、一行ずつ読み込んだり、バッファリングして効率よくファイルに書き込んだりするための標準ライブラリが用意されています。</p>\n<h2 id=\"ファイルを読み書き用に開く\" style=\"position:relative;\"><a href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E7%94%A8%E3%81%AB%E9%96%8B%E3%81%8F\" aria-label=\"ファイルを読み書き用に開く permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ファイルを読み書き用に開く</h2>\n<p>Go でファイルを開く場合</p>\n<ul>\n<li>ファイルを読み込み用に開く場合は<a href=\"https://golang.org/pkg/os/#Open\">os.Open</a></li>\n<li>ファイルを書き込み用に開く場合は<a href=\"https://golang.org/pkg/os/#Create\">os.Create</a></li>\n</ul>\n<p>を使います。どちらの関数も*os.File(と error)を返します。*os.File は Read, Write を実装しているので io.Reader, io.Writer を引数に取る関数に渡すことができます。\nちなみに os パッケージには <a href=\"https://golang.org/pkg/os/#OpenFile\">os.OpenFile</a> という関数も存在しますが、os.OpenFile は os.Open, os.Create の内部で使われる少しプリミティブな関数なので単純にファイルの読み書きをするだけなら普段は os.Open, os.Create を使えば十分です。\nOpen, Create で開いたファイルは<strong>必ず<code>defer f.Close()</code>を呼び出してファイルを閉じる</strong>のを忘れないようにしましょう。</p>\n<h2 id=\"標準入力標準出力標準エラー\" style=\"position:relative;\"><a href=\"#%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E6%A8%99%E6%BA%96%E5%87%BA%E5%8A%9B%E6%A8%99%E6%BA%96%E3%82%A8%E3%83%A9%E3%83%BC\" aria-label=\"標準入力標準出力標準エラー permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>標準入力/標準出力/標準エラー</h2>\n<p>ファイルの代わりに標準入力, 標準出力, 標準エラーを使いたい場合は<a href=\"https://golang.org/pkg/os/#pkg-variables\">os.Stdin, os.Stdout, os.Stderr</a>(いずれも<code>*os.File</code>型)が用意されているのでファイルの代わりにこれを利用します。</p>\n<h2 id=\"メモリからの読み込み・メモリへの書き込み\" style=\"position:relative;\"><a href=\"#%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%8B%E3%82%89%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%83%BB%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%B8%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\" aria-label=\"メモリからの読み込み・メモリへの書き込み permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メモリからの読み込み・メモリへの書き込み</h2>\n<p>ファイル入出力などを行う関数のユニットテストを書く場合などに、ファイルの代わりにメモリからデータを読んだり逆にファイルの代わりにメモリにデータを書き込んだりしたい場合があります。Go ではこのような場合には<a href=\"https://golang.org/pkg/bytes/#Buffer\">bytes.Buffer</a>(書き込み用。読み込みも可), <a href=\"https://golang.org/pkg/bytes/#Reader\">bytes.Reader</a>(読み込み専用)を利用します。</p>\n<iframe src=\"https://play.golang.org/p/xURE66Vfs3\" frameborder=\"0\" style=\"width: 100%; height: 400px\"><a href=\"https://play.golang.org/p/xURE66Vfs3\">see this code in play.golang.org</a></iframe>\n<iframe src=\"https://play.golang.org/p/mYTMuFlQoS\" frameborder=\"0\" style=\"width: 100%; height: 400px\"><a href=\"https://play.golang.org/p/mYTMuFlQoS\">see this code in play.golang.org</a></iframe>\n<h2 id=\"reader-writer-を効率よく使うためのライブラリ\" style=\"position:relative;\"><a href=\"#reader-writer-%E3%82%92%E5%8A%B9%E7%8E%87%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\" aria-label=\"reader writer を効率よく使うためのライブラリ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reader, Writer を効率よく使うためのライブラリ</h2>\n<p>ここからはファイルの読み書き定形処理を行ってくれる便利なライブラリを紹介していきます。\n多くのプログラムでは<code>Read</code>, <code>Write</code>を直接使うのではなく<code>Read</code>, <code>Write</code>をラップしたこれらの便利なライブラリを使ってデータの読み書きします。</p>\n<h3 id=\"bufioscanner-文字列を一行ずつ読み込む\" style=\"position:relative;\"><a href=\"#bufioscanner-%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E4%B8%80%E8%A1%8C%E3%81%9A%E3%81%A4%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\" aria-label=\"bufioscanner 文字列を一行ずつ読み込む permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bufio.Scanner: 文字列を一行ずつ読み込む</h3>\n<p>Reader (例えば読み込み用ファイルや標準入力に対応する*os.File) から文字列を一行ずつ読み込むには<a href=\"http://golang.org/pkg/bufio/#Scanner\">bufio.Scanner</a>を利用します。\n<a href=\"http://golang.org/pkg/bufio/#NewScanner\">bufio.NewScanner</a>(<code>func NewScanner(r io.Reader) *Scanner</code>)で io.Reader から*bufio.Scanner を作成し for ループの中で<a href=\"http://golang.org/pkg/bufio/#Scanner.Scan\">Scan()</a>を呼び出して１行ずつファイルを読み込みます。\n<a href=\"http://golang.org/pkg/bufio/#Scanner.Text\">Text()</a>が返す string には改行文字(<code>\\n</code>)は含まれません。\n<a href=\"/tips/golang_readlines.html\">bufio.Scaner の詳しい使い方はこちらを参照して下さい。</a></p>\n<h3 id=\"bufioreader-writer-バッファリングして効率よく読み書きを行う\" style=\"position:relative;\"><a href=\"#bufioreader-writer-%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E5%8A%B9%E7%8E%87%E3%82%88%E3%81%8F%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E3%82%92%E8%A1%8C%E3%81%86\" aria-label=\"bufioreader writer バッファリングして効率よく読み書きを行う permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bufio.Reader, Writer: バッファリングして効率よく読み書きを行う</h3>\n<p>Java の<a href=\"https://docs.oracle.com/javase/jp/6/api/java/io/BufferedReader.html\">BuferredReader</a>, <a href=\"https://docs.oracle.com/javase/jp/6/api/java/io/BufferedWriter.html\">BufferedWriter</a>のようにバッファリングすることで効率的にファイルに対するデータの読み書きを行うライブラリが Go にも用意されています。</p>\n<h3 id=\"ioioutilreadall-reader-から全てのデータを一度に読み込む\" style=\"position:relative;\"><a href=\"#ioioutilreadall-reader-%E3%81%8B%E3%82%89%E5%85%A8%E3%81%A6%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%B8%80%E5%BA%A6%E3%81%AB%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\" aria-label=\"ioioutilreadall reader から全てのデータを一度に読み込む permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\"io/ioutil\".ReadAll: Reader から全てのデータを一度に読み込む</h3>\n<p>io/util パッケージの<a href=\"https://golang.org/pkg/io/ioutil/#ReadAll\">ReadAll</a>を使うと io.Reader からデータを全て読み込んで、io.Reader の中身のバイト列(<code>[]byte</code>)を作成することができます。</p>\n<h3 id=\"ioioutilreadfile-writefile-ファイル名と-byteで読み書き\" style=\"position:relative;\"><a href=\"#ioioutilreadfile-writefile-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%81%A8-byte%E3%81%A7%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D\" aria-label=\"ioioutilreadfile writefile ファイル名と byteで読み書き permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\"io/ioutil\".ReadFile, WriteFile: ファイル名と byte[]で読み書き</h3>\n<p>io/util パッケージの<a href=\"https://golang.org/src/io/ioutil/ioutil.go?s=1464:1510#L39\">ReadFile</a>, <a href=\"https://golang.org/pkg/io/ioutil/#WriteFile\">WriteFile</a>を使って、\n指定されたファイル名からファイルの中身を byte[]として読み出す処理と、指定されたファイル名のファイルに byte[]を書き込む処理が簡単に行なえます。</p>\n<ul>\n<li><code>func ReadFile(filename string) ([]byte, error)</code></li>\n<li><code>func WriteFile(filename string, data []byte, perm os.FileMode) error</code></li>\n</ul>\n<p><code>WriteFile</code>にはパーミッション<code>perm</code>を明示的に与えなければなりません。何を指定すればいいか迷ったらとりあえず<code>os.Create</code>に合わせて perm は<code>0666</code>を渡しておけばよいでしょう。</p>\n<h3 id=\"writebytes-vs-writestrings\" style=\"position:relative;\"><a href=\"#writebytes-vs-writestrings\" aria-label=\"writebytes vs writestrings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Write([]byte(s)) v.s. WriteString(s)</h3>","tableOfContents":"<ul>\n<li><a href=\"/docs/golang_io.html/#%E5%82%99%E5%BF%98%E7%94%A8%E6%97%A9%E8%A6%8B%E8%A1%A8\">備忘用早見表</a></li>\n<li><a href=\"/docs/golang_io.html/#ioreader-iowriter\">io.Reader, io.Writer</a></li>\n<li><a href=\"/docs/golang_io.html/#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E7%94%A8%E3%81%AB%E9%96%8B%E3%81%8F\">ファイルを読み書き用に開く</a></li>\n<li><a href=\"/docs/golang_io.html/#%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E6%A8%99%E6%BA%96%E5%87%BA%E5%8A%9B%E6%A8%99%E6%BA%96%E3%82%A8%E3%83%A9%E3%83%BC\">標準入力/標準出力/標準エラー</a></li>\n<li><a href=\"/docs/golang_io.html/#%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%8B%E3%82%89%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%83%BB%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%B8%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\">メモリからの読み込み・メモリへの書き込み</a></li>\n<li>\n<p><a href=\"/docs/golang_io.html/#reader-writer-%E3%82%92%E5%8A%B9%E7%8E%87%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">Reader, Writer を効率よく使うためのライブラリ</a></p>\n<ul>\n<li><a href=\"/docs/golang_io.html/#bufioscanner-%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E4%B8%80%E8%A1%8C%E3%81%9A%E3%81%A4%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\">bufio.Scanner: 文字列を一行ずつ読み込む</a></li>\n<li><a href=\"/docs/golang_io.html/#bufioreader-writer-%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E5%8A%B9%E7%8E%87%E3%82%88%E3%81%8F%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E3%82%92%E8%A1%8C%E3%81%86\">bufio.Reader, Writer: バッファリングして効率よく読み書きを行う</a></li>\n<li><a href=\"/docs/golang_io.html/#ioioutilreadall-reader-%E3%81%8B%E3%82%89%E5%85%A8%E3%81%A6%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%B8%80%E5%BA%A6%E3%81%AB%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\">\"io/ioutil\".ReadAll: Reader から全てのデータを一度に読み込む</a></li>\n<li><a href=\"/docs/golang_io.html/#ioioutilreadfile-writefile-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%81%A8-byte%E3%81%A7%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D\">\"io/ioutil\".ReadFile, WriteFile: ファイル名と byte[]で読み書き</a></li>\n<li><a href=\"/docs/golang_io.html/#writebytes-vs-writestrings\">Write([]byte(s)) v.s. WriteString(s)</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Go 言語 ファイル・I/O 関係のよく使う基本ライブラリ","lastmod":"2015-10-13T00:00:00.000Z","enable_toc":true},"fields":{"slug":"/docs/golang_io.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"slug":"/docs/golang_io.html"}}}