{"componentChunkName":"component---src-templates-post-js","path":"/docs/maximum_number_of_threads.html","result":{"data":{"markdownRemark":{"html":"<p>並行 (Concurrent) 処理を実装する方法としてスレッドは非常に強力なツールです。\nスレッドを使えば同時に1つの処理しか行えない既存のプログラムに大きな修正を加えることなく、\n並行処理を実装することが可能です。\nまたイベントとコールバックを複雑に組み合わせた非同期的なプログラムに比べて、\n同期的なプログラム\n(例えばファイルの読み込みにコールバックが出てきたりしない普通のプログラム)は\nプログラムの流れを自然に書くことができ、\n可読性・保守性・テスト、デバッグのしやすさの面で遥かに優れています。\nスレッドを使うとプログラムをそれほど複雑・難読化にせずに並行処理が実装できます。</p>\n<p>一方でスレッドを使った並行処理には欠点もあります。\n欠点の1つは、スレッドモデルでは1つの処理に対して1つのスレッドを用意するので、\nシステムのスレッド数の上限で同時に行える処理の数が決まってしまう点です。\nサーバーアプリケーションの場合、1つのリクエストやコネクションに対して1つのスレッドを用意することになるので、\n同時に捌けるリクエスト数がシステムのスレッド数で決まってしまいます。</p>\n<p>そしてスレッド数の上限はハードウェアのパフォーマンス上の限界よりも低く設定されてしまっている場合があります。\nそのため、スレッドモデルで書かれたプログラムで多数のリクエストを捌くためには、\nスレッド数の上限を決めてしまう制約にどのようなものがあり、それらの制約をどのように緩めればいいかを把握しておく必要があります。</p>\n<p><a href=\"https://github.com/yunabe/practice/blob/master/cpp/thread/max_num_thread.cc\">テスト用のコードを\ngithub</a>\nにアップロードしてあります。</p>\n<h2 id=\"ulimit-によるプロセス数制限\" style=\"position:relative;\"><a href=\"#ulimit-%E3%81%AB%E3%82%88%E3%82%8B%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E6%95%B0%E5%88%B6%E9%99%90\" aria-label=\"ulimit によるプロセス数制限 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ulimit によるプロセス数制限</h2>\n<p>ユーザ毎に起動できるプロセス数の制限が存在します。\nスレッドもプロセスの一種なのでこの上限を超えてスレッドを作成することはできません。\nこの上限は <code>ulimit -u</code> で確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">ulimit</span> -u\nunlimited</code></pre></div>\n<p>この上限は <code>/etc/security/limits.conf</code> をで設定できます。例えば</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yunabe      soft    nproc     10000\nyunabe      hard    nproc     unlimited</code></pre></div>\n<p>みたいなエントリを足せばよいです。編集後は再ログインか <code>ulimit -a</code>\nの実行が必要。</p>\n<h2 id=\"システム全体でのスレッド数の上限\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E5%85%A8%E4%BD%93%E3%81%A7%E3%81%AE%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E6%95%B0%E3%81%AE%E4%B8%8A%E9%99%90\" aria-label=\"システム全体でのスレッド数の上限 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>システム全体でのスレッド数の上限</h2>\n<p>Linux にはシステム全体でのスレッド数の上限が設定されています。この値は</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">cat</span> /proc/sys/kernel/threads-max</code></pre></div>\n<p>で確認できます。 この上限値を挙げるには <code>/etc/sysctl.conf</code> に</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kernel.threads-max = 100000</code></pre></div>\n<p>のようなエントリを追加して、<code>sudo sysctl -p</code>\nを実行してシステムに反映します。</p>\n<h2 id=\"procsysvmmax_map_count\" style=\"position:relative;\"><a href=\"#procsysvmmax_map_count\" aria-label=\"procsysvmmax_map_count permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>/proc/sys/vm/max_map_count</h2>\n<ul>\n<li>pthread は 1スレッドあたり、2つのメモリマップを必要とするようです。</li>\n<li>1つのプロセスで使えるメモリマップの数には上限があります。</li>\n<li>この上限値は <code>cat /proc/sys/vm/max_map_count</code>\nで確認可能。これを半分にした数を超えてスレッドを作ることはできません。</li>\n<li>この値も <code>/etc/sysctl.conf</code> に <code>vm.max_map_count = 200000</code>\nみたいなエントリを足すことで増やすことができる。<code>sudo sysctl -p</code>\nで反映。</li>\n<li>参考:<a href=\"https://listman.redhat.com/archives/phil-list/2003-August/msg00005.html\">https://listman.redhat.com/archives/phil-list/2003-August/msg00005.html</a></li>\n</ul>\n<h2 id=\"プロセス番号の最大値\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E7%95%AA%E5%8F%B7%E3%81%AE%E6%9C%80%E5%A4%A7%E5%80%A4\" aria-label=\"プロセス番号の最大値 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プロセス番号の最大値</h2>\n<ul>\n<li>プロセス番号の最大値 <code>cat /proc/sys/kernel/pid_max</code></li>\n<li>デフォルト値は 32768 (1 &#x3C;&#x3C; 15)。32 bit 環境では上げられない。 64\nbit 環境では 2^22 (4Mぐらい) まで上げることが可能。</li>\n<li><code>man 5 proc</code></li>\n</ul>\n<h2 id=\"スタックと仮想メモリサイズ制限-32bit環境限定\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%81%A8%E4%BB%AE%E6%83%B3%E3%83%A1%E3%83%A2%E3%83%AA%E3%82%B5%E3%82%A4%E3%82%BA%E5%88%B6%E9%99%90-32bit%E7%92%B0%E5%A2%83%E9%99%90%E5%AE%9A\" aria-label=\"スタックと仮想メモリサイズ制限 32bit環境限定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スタックと仮想メモリサイズ制限 (32bit環境限定)</h2>\n<p>pthread のスレッドごとのスタックサイズがデフォルトで 2MB ぐらいらしい\n(要出典) ので、 1つのプロセスでたくさんのスレッドを作ると 32bit\n環境での仮想メモリのサイズ 4.2GB\n(スタックに使えるのはこれより当然小さい)\nを各スレッドのスタックだけで超えてしまいます。 4.2GB/2MB = 2000\nなのでこの上限はかなり小さい。</p>\n<p>解決策はスレッドごとのスタックサイズを小さくするしかありません。 64bit\n環境では仮想メモリが42億倍あるのでこの問題は起こりません。</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/maximum_number_of_threads.html/#ulimit-%E3%81%AB%E3%82%88%E3%82%8B%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E6%95%B0%E5%88%B6%E9%99%90\">ulimit によるプロセス数制限</a></li>\n<li><a href=\"/docs/maximum_number_of_threads.html/#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E5%85%A8%E4%BD%93%E3%81%A7%E3%81%AE%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E6%95%B0%E3%81%AE%E4%B8%8A%E9%99%90\">システム全体でのスレッド数の上限</a></li>\n<li><a href=\"/docs/maximum_number_of_threads.html/#procsysvmmax_map_count\">/proc/sys/vm/max_map_count</a></li>\n<li><a href=\"/docs/maximum_number_of_threads.html/#%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E7%95%AA%E5%8F%B7%E3%81%AE%E6%9C%80%E5%A4%A7%E5%80%A4\">プロセス番号の最大値</a></li>\n<li><a href=\"/docs/maximum_number_of_threads.html/#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%81%A8%E4%BB%AE%E6%83%B3%E3%83%A1%E3%83%A2%E3%83%AA%E3%82%B5%E3%82%A4%E3%82%BA%E5%88%B6%E9%99%90-32bit%E7%92%B0%E5%A2%83%E9%99%90%E5%AE%9A\">スタックと仮想メモリサイズ制限 (32bit環境限定)</a></li>\n</ul>","frontmatter":{"title":"Linux におけるスレッド数の上限","lastmod":"2015-04-26T00:00:00.000Z","enable_toc":null},"fields":{"slug":"/docs/maximum_number_of_threads.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"slug":"/docs/maximum_number_of_threads.html"}}}