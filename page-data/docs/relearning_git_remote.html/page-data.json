{"componentChunkName":"component---src-templates-post-js","path":"/docs/relearning_git_remote.html","webpackCompilationHash":"935b56914147422a1df1","result":{"data":{"markdownRemark":{"html":"<p>この文書のゴールは以下になります:</p>\n<ul>\n<li>別の場所にある git リポジトリ（リモートリポジトリ）と連携する方法について再学習します。</li>\n<li>はじめに git remote, git fetch, git merge\nを使ってリモートリポジトリの内容を手元のリポジトリ（ローカルリポジトリ）に取り込む方法について学習します。</li>\n<li>次に git fetch, git merge を使った一連の作業を自動的に行なってくれる\ngit pull について学習します。</li>\n<li>次に git push を使ってローカルリポジトリの内容をリモートリポジトリに書き出す方法について\n学習します。</li>\n<li>最後に, トラッキングブランチ (tracking branch) について理解し、 git\npull, git push の引数を省略した際のデフォルトの挙動のルールについて学びます。</li>\n</ul>\n<h2 id=\"対象とする人\"><a href=\"#%E5%AF%BE%E8%B1%A1%E3%81%A8%E3%81%99%E3%82%8B%E4%BA%BA\" aria-label=\"対象とする人 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>対象とする人</h2>\n<ul>\n<li>入門本でリモート, push, pull\nについて読んだけど何が「プッシュ」されてなにが「プル」されるのか、よく分からなかった人。</li>\n<li><a href=\"http://git-scm.com/book/ja/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%A7%E3%81%AE%E4%BD%9C%E6%A5%AD\">2.5 Git の基本 -\nリモートでの作業</a>\nや <a href=\"http://git-scm.com/book/ja/Git-%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E6%A9%9F%E8%83%BD-%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81\">3.5 Git のブランチ機能 -\nリモートブランチ</a>\nを読んで何となく分かったけれど、理解を再確認したい人。</li>\n<li><code>git pull</code> と <code>git push</code> を使って 1 人で github を使ってるけど、実は\n<code>git pull</code>, <code>push</code> が何をしているのかよく理解していない人。</li>\n<li><code>git pull/push</code> と <code>fetch/merge</code> の関係を理解していない人</li>\n<li><code>git pull/push</code> で\n「fast-forward ナンタラカンタラ」とかエラーが出てもそれが何なの分かっていない人。\nそれの解決方法 （例えば git fetch &#x26;&#x26; git merge\norigin/master）が何故それでうまくいくのかきちんと説明できない人</li>\n<li><code>git push/pull</code>\nの引数が省略された場合のデフォルトの動作を厳密に説明出来ない人\n「リモートトラッキングブランチ」と「トラキングブランチ」がそれぞれ何であるか説明できない人</li>\n<li>というか少し前の自分のことです...</li>\n</ul>\n<h2 id=\"下準備\"><a href=\"#%E4%B8%8B%E6%BA%96%E5%82%99\" aria-label=\"下準備 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>下準備</h2>\n<p>アリスとボブが 2 人で自分たちの部門の紹介ページを作ろうとしてるとしています。アリスは\ngit リポジトリーを作ってその上で部門の紹介ページの作成を開始しました。\nまずはアリスになったつもりでリポジトリーを作成して、紹介ページを作ってコミットしましょう\n（<code>/tmp/my/workingdir</code> は好きなディレクトリに置き換えて下さい）。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /tmp/my/workingdir\n$ mkdir alice\n$ cd alice\n$ git init\nInitialized empty Git repository in /tmp/my/workingdir/alice/.git/</code></pre></div>\n<p>これでリポジトリができました。まず自分の紹介ページを作ってコミットしましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ echo &quot;I’m Alice.&quot; &gt;&gt; alice.txt\n$ git add alice.txt\n$ git commit -m &quot;Added alice.txt&quot;\n[master (root-commit) 8f6e1d0] Added alice.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 alice.txt</code></pre></div>\n<p>次にメンバー一覧ページも作ってコミットします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ echo &quot;Alice &lt;alice.txt&gt;&quot; &gt;&gt; members.txt\n$ git add members.txt\n$ git commit -m &quot;Added Alice to members.txt&quot;\n[master 9e73b53] Added Alice to members.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 members.txt</code></pre></div>\n<p>アリスが紹介ページを作り始めたのを知らずに、ボブも紹介ページを手元で作りはじめてしまいました。今度はボブになったつもりでリポジトリの作成とコミットを行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /tmp/my/workingdir\n$ mkdir bob\n$ cd bob\n$ git init\nInitialized empty Git repository in /tmp/my/workingdir/alice/.git/\n\n$ echo &quot;I’m Bob.&quot; &gt; bob.txt\n$ git add bob.txt\n$ git commit -m &quot;Added bob.txt&quot;\n[master (root-commit) 527df0c] Added bob.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 bob.txt\n\n$ echo &quot;Bob &lt;bob.txt&gt;&quot; &gt; members.txt\n$ git add members.txt\n$ git commit -m &quot;Added Bob to members.txt&quot;\n[master f3bc482] Added Bob to members.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 members.txt</code></pre></div>\n<p>アリスとボブがそれぞれ手元で紹介ページをある程度作ったところで、アリスとボブはお互いが別々の場所で紹介ページの作成をしていたことに気が付きます。アリスとボブはそれぞれが手元で作ったコミットを相手と共有しなければなりません。こうしたケースに対処するために\ngit では「リモート」という仕組みと、<code>git fetch</code>, <code>pull</code>, <code>push</code>\nといったコマンドが用意されています。</p>\n<img src=\"https://docs.google.com/drawings/d/1k9ZFqZb2xSvMwTKi-74YtbczJr9uDgbMG6DfT9wyCmI/pub?w=756&amp;h=728\" width=\"378\" height=\"364\">\n<h2 id=\"リモート-remote\"><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88-remote\" aria-label=\"リモート remote permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リモート (Remote)</h2>\n<p>git では別の場所にあるリポジトリ（以下リモートリポジトリ）を手元のリポジトリ（以下ローカルリポジトリ）と連携させることができます。\nリモートリポジトリとローカルリポジトリの連携により、リモートリポジトリにあるコミットをローカルリポジトリに持ってきたり、\n逆にローカルリポジトリで行ったコミットをリモートリポジトリに書き出すことができます。</p>\n<h3 id=\"リモートリポジトリの登録と読み込み\"><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E7%99%BB%E9%8C%B2%E3%81%A8%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\" aria-label=\"リモートリポジトリの登録と読み込み permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リモートリポジトリの登録と読み込み</h3>\n<p>リモートリポジトリ\nと連携するために、まずローカルリポジトリにリモートリポジトリを登録する必要があります。\nリモートリポジトリの登録には <code>git remote add</code> を利用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git remote add &lt;name&gt; &lt;URL&gt;</code></pre></div>\n<p>現在ローカルリポジトリに登録されているリモートリポジトリの一覧は\n<code>git remote</code> で確認することができます。 各 remote\nの、例えば URL などの、詳細な情報 は <code>git remote show &#x3C;remote></code>\nで確認できます。</p>\n<p>リモートリポジトリにあるコミットを読み込んでみましょう。リモートリポジトリにあるコミットは\n<code>git fetch &#x3C;remote></code> でローカルリポジトリにロードすることができます。\ngit fetch\nでコミットをロードすると、リモートリポジトリ上のブランチに対応する「リモートトラキングブランチ」という特殊なブランチが自動的に作成されます（ブランチはコミットに対するポインタであることに注意して下さい）。\nリモートトラッキングブランチの名前は <code>&#x3C;remote>/&#x3C;branch></code>\nという名前になります。現在のリポジトリにあるリモートトラッキングブランチの一覧は\n<code>git branch -r</code> で確認できます。</p>\n<p>アリスとボブのケースに戻りましょう。ボブはアリスが紹介ページを自分の作っているものにマージすることにしました。\nボブはアリスのリポジトリー上のコミットを取り込むために、まずアリスのリポジトリを自分のリポジトリに「リモートリポジトリ」として登録します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /tmp/my/workingdir/bob\n$ git remote add alice /tmp/my/workingdir/alice\n\n$ git remote\nalice\n$ git remote show alice\n* remote alice\n  Fetch URL: /tmp/my/workingdir/alice\n  Push  URL: /tmp/my/workingdir/alice\n  HEAD branch: master\n  Remote branch:\n    master new (next fetch will store in remotes/alice)\n  Local ref configured for &#39;git push&#39;:\n    master pushes to master (local out of date)</code></pre></div>\n<p>次にアリスのリポジトリをフェッチします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git fetch alice\nwarning: no common commits\nremote: Counting objects: 6, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 6 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (6/6), done.\nFrom /tmp/my/workingdir/alice\n * [new branch]      master     -&gt; alice/master\n$ git branch -r\n  alice/master</code></pre></div>\n<p>bob のリポジトリの状態を図を書くと次のようになります。 リポジトリ alice\nからコミットがコピーされており、master ブランチの代わりに <code>alice/master</code>\nという「リモートトラッキングブランチ」が作成されていることに注意して下さい。</p>\n<img src=\"https://docs.google.com/drawings/d/1aw6WitGt4TCLuqi2812vPdU_K8MPSh_C8XiZUHXeg-w/pub?w=1321&amp;h=664\" width=\"660\" height=\"332\">\n<h2 id=\"リモートトラキングブランチを扱う\"><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%88%E3%83%A9%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E6%89%B1%E3%81%86\" aria-label=\"リモートトラキングブランチを扱う permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リモートトラキングブランチを扱う</h2>\n<p>これで <code>git remote add</code> と <code>git fetch</code>\nで別の場所にあるリポジトリを登録し、そこからコミットを読み込むことができました。\nその際にリモートリポジトリ上のブランチに対応する <code>&#x3C;remote>/&#x3C;branch></code>\nという名前の「リモートトラキングブランチ」が自動的に作られることが分かりました。</p>\n<p>「リモートトラッキングブランチ」(e.g. <code>origin/master</code>) は通常のブランチ\n(e.g. <code>master</code>) や <code>HEAD</code>, <code>HEAD^</code>, コミットのハッシュ ID\n(<code>198bc17aade</code>),\nタグと同様に手元のリポジトリに保存されているコミットに対するポインタです。\nそのため前章で学んだような <code>git checkout</code>, <code>git merge</code>, <code>git branch</code>\nのようなコマンドはリモートトラッキングブランチに対しても変わらず利用できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git log alice/master</code></pre></div>\n<p>でボブはリモートリポジトリ（アリスのリポジトリ）上の <code>master</code>\nブランチのログを見ることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout alice/master</code></pre></div>\n<p>とするとボブはアリスのリポジトリの <code>master</code>\nブランチの最新の状態を再現することができます （ただし\n<code>You are in 'detached HEAD' state.</code>\nと言われてこのままでは編集作業ができないことに注意）。</p>\n<h2 id=\"リモートトラッキングブランチとマージする\"><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%A8%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%99%E3%82%8B\" aria-label=\"リモートトラッキングブランチとマージする permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リモートトラッキングブランチとマージする</h2>\n<p>次にリモートトラッキングブランチ（リモートリポジトリ上のブランチ）をローカルのブランチにマージしてみましょう。\nこれはローカルでブランチをマージした場合と全く同じようにできます。</p>\n<p>ボブはアリスの master ブランチを自分の master\nブランチにマージすることにしました。\nマージしようとしている 2 つのコミットに共通する先祖が存在しない点が、ローカルのみで作業していた場合と少し違いますが、\nこれはファイルが何もない「初期状態」が共通の親として暗黙的存在すると考えれば特に問題はないかと思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git checkout master\n$ git merge alice/master\nAuto-merging members.txt\nCONFLICT (add/add): Merge conflict in members.txt\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre></div>\n<p>members.txt\nはアリスとボブ両方のリポジトリで編集されていたのでコンフリクトが発生します。\n適当にコンフリクトを解消します。このあたりの作業もローカルのブランチをマージする場合となにも変わりません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ emacs members.txt # 適当なエディタで衝突を解消\n$ git add members.txt\n$ git commit\n[master 5de7b36] Merge remote-tracking branch &#39;alice/master&#39;</code></pre></div>\n<p>これで無事、ボブはアリスが行った変更を自分のリポジトリに取り込むことができました。ボブのリポジトリの状態は図で書くと以下のようになります</p>\n<img src=\"https://docs.google.com/drawings/d/1-ChqglgHp_OTeNlqVnDQyZLYHxA2o6oBm3Vlspxald0/pub?w=1007&amp;h=644\" width=\"503\" height=\"322\">\n<h2 id=\"git-pull\"><a href=\"#git-pull\" aria-label=\"git pull permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git pull</h2>\n<p>今度はアリスの立場になってボブのリポジトリ上の master\nブランチをローカルリポジトリの master ブランチにマージしましょう。\nボブがアリスのコミットを読み込んだ時と同じようにまずはリモートリポジトリを\n<code>git remote add</code> で登録します。 続いて、git fetch と git merge\nを実行すれば前述したようにボブのリポジトリ上の master ブランチをローカルリポジトリの\nmaster ブランチにマージすることが出来ます。 この fetch → merge\nという一連の処理は非常に頻繁に行われるので、これを一度に行う <code>git pull</code>\nというコマンドが用意されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git pull &lt;remote&gt; &lt;src&gt;</code></pre></div>\n<p>このコマンドを実行すると <code>git fetch &#x3C;remote></code> →\n<code>git merge &#x3C;remote>/&#x3C;src></code> を実行した場合と同じようにリモートリポジトリ\n&#x3C;remote> 上の &#x3C;src> ブランチが\n現在のブランチにマージされます（厳密には git fetch &#x3C;remote> &#x3C;src> →\ngit merge FETCHED_HEAD）。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /tmp/my/workingdir/alice\n$ git remote add bob /tmp/my/workingdir/bob\n$ git pull bob master\nremote: Counting objects: 11, done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 9 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (9/9), done.\nFrom /tmp/my/workingdir/bob\n * branch            master     -&gt; FETCH_HEAD\n * [new branch]      master     -&gt; bob/master\nUpdating 9e73b53..5de7b36\nFast-forward\n bob.txt     | 1 +\n members.txt | 1 +\n 2 files changed, 2 insertions(+)\n create mode 100644 bob.txt</code></pre></div>\n<p>また後述するように <code>git pull</code>\nは引数を省略することができるので、日常の業務で利用するには <code>git fetch</code>\nと <code>merge</code> をばらばらに実行するよりも便利です。</p>\n<img src=\"https://docs.google.com/drawings/d/1ArgcrHHHctjQnkAMqqxqqKXrtxdWOCmpVBJ3IdiYJGA/pub?w=1010&amp;h=545\" width=\"505\" height=\"272\">\n<h2 id=\"ここまでのまとめ\"><a href=\"#%E3%81%93%E3%81%93%E3%81%BE%E3%81%A7%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"ここまでのまとめ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ここまでのまとめ</h2>\n<ul>\n<li>別の場所にある git\nリポジトリ（リモートリポジトリ）と連携するための仕組みとして git\nには「リモート」というものが用意されています。</li>\n<li>リモートリポジトリと連携するには、まずローカルリポジトリに登録するリモートリポジトリを登録します。これには\n<code>git remote add &#x3C;name> &#x3C;url></code> を利用します。</li>\n<li>リモートリポジトリ上のコミットを <code>git fetch</code>\nでロードすることができます。\nこの際、リモートリポジトリ上のブランチに対応する「リモートトラッキングブランチ」が自動的に作成されます。\nリモートトラッキングブランチの名前は <code>&#x3C;remote>/&#x3C;branch></code> (e.g.\n<code>alice/master</code>) となります。</li>\n<li>git fetch\nで取り込んだ後は、リモートトラッキングブランチという特殊なブランチがある以外は単一のリポジトリで作業している場合全く同じように作業できる。\nリモートリポジトリ上で行われたコミットを手元のブランチに取り込むには\n<code>git merge</code> を行えば良い。</li>\n<li><code>git fetch</code> → <code>git merge</code> の一連の流れは <code>git pull</code>\nコマンドで行うことができる。</li>\n</ul>\n<h2 id=\"git-push\"><a href=\"#git-push\" aria-label=\"git push permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git push</h2>\n<p>ここまで紹介した方法で、異なる場所にあるリポジトリを連携させることができるようになりました。\nしかし今まで紹介した、お互いのリポジトリーからコミットを読み込んでマージするという方法は</p>\n<ul>\n<li>アリスのコンピュータの電源が落ちているなどの理由でアリスのリポジトリにアクセス出来ないと共同作業が出来ない。</li>\n<li>チャーリーが作業に参加するとアリスは、ボブとチャーリのリポジトリそれぞれからコミットを\ngit pull しなければなりません。\n更に参加者が増えると読み込むリポジトリが参加人数に比例して増えてしまい破綻してしまいます。</li>\n</ul>\n<p>のような問題があり実際に日常の業務で使うのには現実的でありません。\nこの問題を解決する git\nの運用方法は複数存在しますが、1 つの単純な解決方法は共有のリポジトリを 1 つ用意して作業に参加する人が各自のローカルレポジドリに共有リポジトリからコミットを読み込み、ローカルレポジドリに作成したコミットを共有リポジトリに書き込むことです。\nこれを実現するには今まで述べてきたリモートリポジトリからコミットを読み込む方法に加えて、リモートリポジトリに対して手元のコミットを書き込む方法も必要になります。\nこのコミットをリモートリポジトリに書き込むための手段が <code>git push</code> です。</p>\n<img src=\"https://docs.google.com/drawings/d/1-_EHaRYe_WWE-Jhg8HBESQSG10DqeZOqaurQVKzec4U/pub?w=1040&amp;h=499\" width=\"520\" height=\"249\">\n<h3 id=\"bare-repository\"><a href=\"#bare-repository\" aria-label=\"bare repository permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>共有用のリポジトリを作る</h3>\n<p>まず共有用のリポジトリを作成しましょう。各々のユーザがコミットの書き込み\n(<code>git push</code>) を行うリポジトリは <a href=\"http://git-scm.com/docs/gitglossary/2.0.0#def_bare_repository\">「裸」のリポジトリ（bare\nrepository）</a>\nである必要があります。 bare repository は作業ディレクトリのない（<code>.git</code>\nディレクトリのみ存在する） git リポジトリです。 bare リポジトリは git\ninit に <code>--bare</code> オプションをつけて実行することで作成できます。\nあるいは、 git clone で既存のリポジトリを複製する際に <code>--bare</code>\nオプションを付けることで 既存のリポジトリを bare\nリポジトリとして複製することも出来ます。 また bare\nリポジトリのディレクトリ名には <a href=\"http://git-scm.com/docs/gitglossary/2.0.0#def_bare_repository\">.git\nを末尾につけるのが慣習です</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /tmp/my/workingdir\n$ mkdir shared.git\n$ cd shared.git\n$ git init --bare\nInitialized empty Git repository in /private/tmp/my/workingdir/shared.git/</code></pre></div>\n<p><code>ls</code> で <code>shared.git</code> の中身を確認してみると、通常のリポジトリの <code>.git</code>\nディレクトリの中身が保存されていることが分かります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ls\nHEAD        branches    config      description hooks       info        objects     refs</code></pre></div>\n<h3 id=\"git-push-でコミットを書き込む\"><a href=\"#git-push-%E3%81%A7%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%82%80\" aria-label=\"git push でコミットを書き込む permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git push でコミットを書き込む</h3>\n<p>次にアリスの立場に手元のコミットを共有リポジトリに書き出してみましょう。まずは共有リポジトリをリモートとして登録します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /tmp/my/workingdir/alice\n$ git remote add shared /tmp/my/workingdir/shared.git</code></pre></div>\n<p>次に shared に対してコミットを書き込みます。コミットの書き込みには git\npush を利用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git push &lt;remote&gt; &lt;src&gt;:&lt;dst&gt;</code></pre></div>\n<p>このコマンドを実行するとローカルリポジトリの &#x3C;src>\nが指すコミットとその先祖のコミットを &#x3C;remote> に対して書き込み、\n同時に &#x3C;remote> の &#x3C;dst> が &#x3C;src>\nと同じコミットを指すように変更します。</p>\n<ul>\n<li>&#x3C;dst> ブランチが存在しない場合は &#x3C;dst> ブランチが &#x3C;remote>\nに作成されます。</li>\n<li>&#x3C;dst> ブランチがすでに存在する場合には &#x3C;dst> を &#x3C;src> まで\n<strong>fast-forward</strong> します。fast-forward できない場合 （&#x3C;dst> が\n&#x3C;src> の祖先でない場合）には git push は <strong>失敗</strong> します。</li>\n</ul>\n<p>アリスのリポジトリから共有リポジトリに対して、master\nブランチを書き込んでみましょう</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git push shared master:master\nounting objects: 15, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (15/15), 1.32 KiB | 0 bytes/s, done.\nTotal 15 (delta 0), reused 0 (delta 0)\nTo /tmp/my/workingdir/shared.git\n * [new branch]      master -&gt; master</code></pre></div>\n<p>これでアリスの master\nブランチ（の指すコミットとその全ての先祖コミット）が shared\nに対して書き込まれ、shared に master\nブランチが作成されます。図にすると以下な状態になります。</p>\n<img src=\"https://docs.google.com/drawings/d/13zVdgJQz_qeApchPVReQtFUbmaEleLuJci2j035OBZ8/pub?w=1015&amp;h=1073\" width=\"507\" height=\"536\">\n<p>続いて新しいコミットを作ってそれも shared に push してみましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ echo &quot;Email: alice@example.com&quot; &gt;&gt; alice.txt\n$ git commit -a -m &quot;Added an email addr to alice.txt&quot;\n[master c671712] Added an email addr to alice.txt\n 1 file changed, 1 insertion(+)\n$ git push shared master:master\nCounting objects: 5, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 357 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo /tmp/my/workingdir/shared.git\n   77c39e3..c671712  master -&gt; master</code></pre></div>\n<img src=\"https://docs.google.com/drawings/d/1Qgia-UMx3KM3Ms1xbAfMyF53TQKLL8_E_EJya_k7zSM/pub?w=1335&amp;h=1069\" width=\"667\" height=\"534\">\n<h3 id=\"push-fast-forward-に失敗した場合の対処法\"><a href=\"#push-fast-forward-%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95\" aria-label=\"push fast forward に失敗した場合の対処法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>push (fast-forward) に失敗した場合の対処法</h3>\n<p>次にボブの立場になって共有リポジトリに新しいコミットを push\nしてみましょう。 まず共有リポジトリを <code>git remote add</code> で登録します</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd /tmp/my/workingdir/bo\n$ git remote add shared /tmp/my/workingdir/shared</code></pre></div>\n<p>続いて新しいコミットを作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ echo &quot;Email: bob@example.com&quot; &gt;&gt; bob.txt\n$ git commit -a -m &quot;Added an email addr to bob.txt&quot;\n[master 99af642] Added an email addr to bob.txt\n 1 file changed, 1 insertion(+)</code></pre></div>\n<p>これを <code>git push</code> してみましょう。そうするとエラーが発生してしまいます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git push shared master:master\nTo /tmp/my/workingdir/shared.git\n ! [rejected]        master -&gt; master (fetch first)\nerror: failed to push some refs to &#39;/tmp/my/workingdir/shared.git&#39;\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., &#39;git pull ...&#39;) before pushing again.\nhint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</code></pre></div>\n<p>前述したように <code>git push &#x3C;remote> &#x3C;src>:&#x3C;dst></code> は <code>&#x3C;remote></code> 上の\n<code>&#x3C;dst></code> (今回は <code>shared</code> 上の <code>master</code>) を <code>&#x3C;src></code> (今回は <code>bob</code> の\n<code>master</code>) が指しているコミットまで fast-forward します。 fast-forward\n出来ない場合は失敗してしまいます。</p>\n<img src=\"https://docs.google.com/drawings/d/1fxsEiHFLN5plyCtJ87HZD-APhTTz8RI_2-iZdTS5NR0/pub?w=1342&amp;h=878\" width=\"671\" height=\"439\">\n<p>fast-forward を可能にして <code>push</code> を行うためには、ローカルの <code>master</code>\nブランチを <code>shared</code> の <code>master</code> とマージしてあげる必要があります。\n前述したように <code>git pull</code> でマージしましょう (あるいは <code>git fetch</code> と\n<code>git merge</code> でもよい)。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git pull shared master\nMerge made by the &#39;recursive&#39; strategy.\n alice.txt | 1 +\n 1 file changed, 1 insertion(+)</code></pre></div>\n<p>bob のリポジトリは図のような状態になります。</p>\n<img src=\"https://docs.google.com/drawings/d/1HQOPf9ZNngLfEUKtsN6W-CP2Dc1TK_lIqKqEZVdUMVQ/pub?w=1516&amp;h=599\" width=\"758\" height=\"299\">\n<p>これで <code>shared/master</code> が bob の <code>master</code> の先祖になったので、 <code>shared</code>\nの <code>master</code> を bob の <code>master</code> に fast-forward できるようになりました。\nもう一度プッシュを行うと今度は成功するはずです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git push shared master:master\nCounting objects: 8, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (5/5), 684 bytes | 0 bytes/s, done.\nTotal 5 (delta 0), reused 0 (delta 0)\nTo /tmp/my/workingdir/shared\n   c671712..14245e3  master -&gt; master</code></pre></div>\n<p>リモートリポジトリを使って作業を行うのに最低限必要な知識は以上です。\nあとはトラッキングブランチ、アップストリーム、そして git pull/push の引数を省略した場合に何が起こるかについて理解していれば、\nリモートレポジトリを使う上で困ることはあまり無いかと思います。\nそれらについては</p>\n<ul>\n<li><a href=\"relearning_git_pull_default.html\">引数がない git pull のデフォルトの挙動 (アップストリーム, トラッキングブランチについて)</a></li>\n<li><a href=\"relearning_git_push_default.html\">引数がない場合の git push のデフォルトの挙動</a></li>\n</ul>\n<p>を参考にして下さい。</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/relearning_git_remote.html/#%E5%AF%BE%E8%B1%A1%E3%81%A8%E3%81%99%E3%82%8B%E4%BA%BA\">対象とする人</a></li>\n<li><a href=\"/docs/relearning_git_remote.html/#%E4%B8%8B%E6%BA%96%E5%82%99\">下準備</a></li>\n<li>\n<p><a href=\"/docs/relearning_git_remote.html/#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88-remote\">リモート (Remote)</a></p>\n<ul>\n<li><a href=\"/docs/relearning_git_remote.html/#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E7%99%BB%E9%8C%B2%E3%81%A8%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\">リモートリポジトリの登録と読み込み</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/relearning_git_remote.html/#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%88%E3%83%A9%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E6%89%B1%E3%81%86\">リモートトラキングブランチを扱う</a></li>\n<li><a href=\"/docs/relearning_git_remote.html/#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%A8%E3%83%9E%E3%83%BC%E3%82%B8%E3%81%99%E3%82%8B\">リモートトラッキングブランチとマージする</a></li>\n<li><a href=\"/docs/relearning_git_remote.html/#git-pull\">git pull</a></li>\n<li><a href=\"/docs/relearning_git_remote.html/#%E3%81%93%E3%81%93%E3%81%BE%E3%81%A7%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">ここまでのまとめ</a></li>\n<li>\n<p><a href=\"/docs/relearning_git_remote.html/#git-push\">git push</a></p>\n<ul>\n<li><a href=\"/docs/relearning_git_remote.html/#bare-repository\">共有用のリポジトリを作る</a></li>\n<li><a href=\"/docs/relearning_git_remote.html/#git-push-%E3%81%A7%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%82%80\">git push でコミットを書き込む</a></li>\n<li><a href=\"/docs/relearning_git_remote.html/#push-fast-forward-%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95\">push (fast-forward) に失敗した場合の対処法</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Git 再入門 リモートリポジトリを使った作業","lastmod":"2015-05-01T00:00:00.000Z","enable_toc":true},"fields":{"slug":"/docs/relearning_git_remote.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/relearning_git_remote.html"}}}