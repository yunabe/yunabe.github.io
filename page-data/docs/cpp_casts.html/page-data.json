{"componentChunkName":"component---src-templates-post-js","path":"/docs/cpp_casts.html","webpackCompilationHash":"935b56914147422a1df1","result":{"data":{"markdownRemark":{"html":"<h2 id=\"static_cast\"><a href=\"#static_cast\" aria-label=\"static_cast permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>static_cast</h2>\n<p>ある型からある型への暗黙の変換が存在する時に(たとえば<code>int</code>から<code>double</code>など)、そこで暗黙の変換が行われることを明示する場合に行います。\n多くの場合は<code>static_cast</code>は省略することが可能です。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"dynamic_cast\"><a href=\"#dynamic_cast\" aria-label=\"dynamic_cast permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dynamic_cast</h2>\n<p>親クラスの型のポインタを子クラスのポインタにキャストするときに利用します。\nこの際、その親クラスの型のポインタが指すオブジェクトの実体のクラスがキャスト先のクラスであることを確認されます。\nポインタが指す実体がキャスト先のクラスまたはその子孫クラスである場合はポインタはそのまま使われますが、\nそうでなくキャスト先のクラスとして使用できない場合には<code>NULL</code>(<code>nullptr</code>)に置き換えられます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">Child0 child0<span class=\"token punctuation\">;</span>\nParent<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>child0<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Child1* child1 = parent; &lt;-- compile error.</span>\nChild1<span class=\"token operator\">*</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span>Child1<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nChild0<span class=\"token operator\">*</span> child0_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span>Child0<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// child1 is nullptr. child0_2 == child0.</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"child1: \"</span> <span class=\"token operator\">&lt;&lt;</span> child1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", child0_2: \"</span> <span class=\"token operator\">&lt;&lt;</span> child0_2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"child0_2->name(): \"</span> <span class=\"token operator\">&lt;&lt;</span> child0_2<span class=\"token operator\">-></span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>dynamic_cast</code>を行うためには、型情報がポインタから得られる必要があります。つまりクラスは<a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\"><em>polymorphic</em></a>である必要があります。\nつまり親クラスは最低でも 1 つの<code>virtual</code>な関数が親クラスに定義されていて<em>vtable</em>が存在しなくてはなりません。</p>\n<h2 id=\"reinterpret_cast\"><a href=\"#reinterpret_cast\" aria-label=\"reinterpret_cast permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reinterpret_cast</h2>\n<ol>\n<li>ポインタ型を他のポインタ型に強制的に変換します。<code>dynamic_cast</code>と違いポインタの型変換が安全に行えるかは考慮されません。</li>\n<li>また整数型(<code>int</code>, <code>long</code>, <code>long long</code>など)を任意の型のポインタに変換するのにも利用できます。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 257 in little-endian.</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"j: \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> addrint <span class=\"token operator\">=</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"addrint: \"</span> <span class=\"token operator\">&lt;&lt;</span> addrint <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Note: reinterpret_cast&lt;int>(c); causes a compile error.</span></code></pre></div>\n<h2 id=\"const_cast\"><a href=\"#const_cast\" aria-label=\"const_cast permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>const_cast</h2>\n<p>ポインタ型、参照型に<code>const</code>をつけたり外したりするのに使えます。驚くべきことに C++では<code>const_cast</code>を使って型についている const を外すことが許されています。\nとはいえ当然<code>const</code>はこの変数は今後変更されないということを表しているのですから、それを解除してしまうのは問題があります。\n互換性などの問題でどうしても使わざるを得ない場合以外では使うべきではないでしょう。\n逆に<code>const</code>へのキャストで一番多いのは<code>const &#x26;</code>な関数の引数として変数を渡す場合だと思いますが、この場合にわざわざ<code>const_cast</code>をつけることはあまりしないと思うので、結局<code>const_cast</code>を使うことはあまりないです。</p>\n<p><code>const_cast&#x3C;></code>を呼び出し側に明示することで引数が<code>const</code>だと一見して明らかになるので、<code>const_cast</code>を明示的に書くことのメリットが全くないわけではありませんが。</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/cpp_casts.html/#static_cast\">static_cast</a></li>\n<li><a href=\"/docs/cpp_casts.html/#dynamic_cast\">dynamic_cast</a></li>\n<li><a href=\"/docs/cpp_casts.html/#reinterpret_cast\">reinterpret_cast</a></li>\n<li><a href=\"/docs/cpp_casts.html/#const_cast\">const_cast</a></li>\n</ul>","frontmatter":{"title":"C++と 4 つのキャスト演算","lastmod":"2016-12-18T00:00:00.000Z","enable_toc":null},"fields":{"slug":"/docs/cpp_casts.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/cpp_casts.html"}}}