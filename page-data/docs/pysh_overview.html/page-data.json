{"componentChunkName":"component---src-templates-post-js","path":"/docs/pysh_overview.html","result":{"data":{"markdownRemark":{"html":"<p>Pysh はシェルスクリプトをPythonで記述するためのプログラムです。 Pysh\nを利用すると、コマンドの実行やリダイレクションやパイプといったシェルスクリプトの\n便利な機能を Python スクリプトの中で簡単に利用できるようになり、 Python\nをシェルスクリプトの代わりとしてより利用しやすくなります。 Python\n使いならばもはやシェルスクリプトを書く理由は何もありません(Windows以外)。</p>\n<h2 id=\"特徴\"><a href=\"#%E7%89%B9%E5%BE%B4\" aria-label=\"特徴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特徴</h2>\n<p>Pysh では Python スクリプトの中に含まれている <code>></code>\nで始まる行をシェルコマンドとして実行します。 それ以外の部分は通常の\nPython スクリプトとして処理されます。 例えば次のスクリプトはfrom00.txt,\nfrom01.txt, ..., from99.txt を to00.txt...to99.txt に移動します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for i in xrange(100):\n  index = &quot;%02d&quot; % i\n  &gt; mv from$index.txt to$index.txt</code></pre></div>\n<p>Pysh は次のような特徴を持ちます</p>\n<ul>\n<li><code>></code> で始まる行をシェルコマンドとして実行できる。</li>\n<li>シェルコマンドの中から <strong>Pythonの変数</strong>\nがシェルスクリプトと同じように <code>$var</code> のように参照できる。</li>\n<li>パイプやリダイレクションも利用可能</li>\n<li>if,\nfor文などはシェルコマンドの中では利用できない。プログラムの制御はPythonで行う。</li>\n<li>フィルタ系組み込み関数 map, filter, reduce\nがコマンドとして利用できる。 grep, sed, awk\nを利用しなくても柔軟なフィルタリング・置換・変形が行える。</li>\n<li>組み込みコマンドを Python で書くことができる。</li>\n<li>Pythonで書かれたコマンドは入出力をPythonオブジェクトとして扱うことができる。</li>\n<li>またPythonオブジェクトのまま、出力を他のコマンドにパイプすることができる</li>\n</ul>\n<h2 id=\"使い方\"><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"使い方 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使い方</h2>\n<h3 id=\"インストール\"><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"インストール permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>インストール</h3>\n<p><a href=\"https://github.com/yunabe/pysh\">GitHubからソースコード</a>\nをチェックアウトします。 Pysh は Python で実装されているので Python\nがインストールされている環境ならば\n簡単に実行できます。ただしWindowsはサポート外です。 pysh\nはスクリプトファイルをファイル・標準入力・引数のいずれかで与えて実行することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout https://github.com/yunabe/pysh.git\n./pysh/bin/pysh&lt;/pre&gt;</code></pre></div>\n<h3 id=\"ファイルから実行\"><a href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C\" aria-label=\"ファイルから実行 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ファイルから実行</h3>\n<p>python\nコマンドと同様に、pyshの引数としてファイルを与えるとファイルをpyshスクリプトとして\n解釈し実行します。 pysh コマンドは与えられたファイルを通常の Python\nスクリプトに変換し Python として実行を行います。\nそのため実行後、スクリプト名と同名の拡張子が .py のファイルが残ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pysh script.pysh</code></pre></div>\n<h3 id=\"標準入力から実行\"><a href=\"#%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C\" aria-label=\"標準入力から実行 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>標準入力から実行</h3>\n<p>python コマンドと同様に、pyshの引数として <code>-</code> を与えると\n標準入力からpyshスクリプトを読み込み実行します。\nこの機能はpyshをワンライナーの代わりに利用する際に重宝します。\n複雑で読みづらいワンライナーを書くぐらいなら Python\nで構造化されたプログラムを書きましょう。\n構造化されたスクリプトはワンライナーよりも遥かに読みやすく、将来再利用することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pysh - &lt;&lt; &#39;EOF&#39;\nfor i in xrange(3):\n  index = &quot;%02d&quot; % i\n  &gt; echo $index\nEOF</code></pre></div>\n<h3 id=\"引数から実行\"><a href=\"#%E5%BC%95%E6%95%B0%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C\" aria-label=\"引数から実行 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引数から実行</h3>\n<p>python コマンドと同様に、pyshの引数として <code>-c cmd</code> を与えると <code>cmd</code>\nをスクリプトとして解釈、実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pysh -c &quot;`cat &lt;&lt; &#39;EOF&#39;\nfor i in xrange(3):\n  index = &quot;%02d&quot; % i\n  &gt; echo $index\nEOF`&quot;&lt;/pre&gt;</code></pre></div>\n<h2 id=\"機能\"><a href=\"#%E6%A9%9F%E8%83%BD\" aria-label=\"機能 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>機能</h2>\n<h3 id=\"変数参照\"><a href=\"#%E5%A4%89%E6%95%B0%E5%8F%82%E7%85%A7\" aria-label=\"変数参照 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>変数参照</h3>\n<p><code>$var</code> でPythonの変数をシェルコマンドの中から参照することができます。\n環境変数も <code>$PATH</code> のように Python の変数と同じように参照できます。\nまた他のシェルと同様に <code>\"\"</code>\nで囲まれた文字列中の変数は自動的に展開されます。 <code>''</code>\nで囲まれた文字列中の変数は展開されません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = 3\ny = x * x\n&gt; echo $y     # 9\n&gt; echo $PATH  # os.environment[&#39;PATH&#39;]\n&gt; echo &quot;$x * $x = $y&quot;  # 3 * 3 = 9\n&gt; echo &#39;$x * $x = $y&#39;  # $x * $x = $y</code></pre></div>\n<h3 id=\"python式\"><a href=\"#python%E5%BC%8F\" aria-label=\"python式 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python式</h3>\n<p>Pyshでは変数だけでなく任意の Python\n式をシェルコマンドの中で利用することができます。\nシェルコマンドの中でPython式を書くには&#x3C;code>${expr}&#x3C;/code>のように書きます。\n変数参照と同様に、 <code>\"\"</code> 文字列中のPython式は評価されますが <code>''</code>\n文字列中のPython式は評価されません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; echo ${3 + 4}  # 7\ndef f(x):\n  return x * x\n&gt; echo ${f(10)}  # 100\n&gt; echo ${lambda x: x}</code></pre></div>\n<h3 id=\"パイプ\"><a href=\"#%E3%83%91%E3%82%A4%E3%83%97\" aria-label=\"パイプ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>パイプ</h3>\n<p>Pysh ではその他のシェルと同じようにコマンドの入出力をパイプ <code>|</code>\nでつなぐことができます</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; echo &quot;foo\\nbar&quot; | tac</code></pre></div>\n<h3 id=\"リダイレクション\"><a href=\"#%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\" aria-label=\"リダイレクション permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リダイレクション</h3>\n<p>Pysh\nではリダイレクションを使ってコマンドの出力結果をファイルに出力することができます。\nまた、<code>&#x26;>1</code>\nのようにして標準エラーの出力先を標準出力と同じにすることなどもできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; echo &quot;Hello world&quot; &gt; /dev/null\n&gt; echo &quot;Hello world&quot; &gt;&gt; /dev/null\n&gt; echo &quot;Hello world&quot; 2&gt;&amp;1</code></pre></div>\n<h3 id=\"--\"><a href=\"#--\" aria-label=\"   permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x26;&#x26; || ;</h3>\n<p>Pyshでは他のシェルと同様に <code>;</code> で複数のコマンドを順番に実行したり、 <code>&#x26;&#x26;</code>\nで論理積(前者のコマンドが成功したら後者のコマンドを実行)や、 <code>||</code>\nで論理和(前者のコマンドが失敗したら後者のコマンドを実行)を使うことができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; echo foo; echo bar\n&gt; echo foo &amp;&amp; echo bar\n&gt; echo foo || echo bar</code></pre></div>\n<h3 id=\"文字列リテラル\"><a href=\"#%E6%96%87%E5%AD%97%E5%88%97%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB\" aria-label=\"文字列リテラル permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文字列リテラル</h3>\n<p>Pysh ではシェルコマンド中の文字列リテラルの形式は Python\nのそれと同じです。 <code>\\n</code>\nなどのエスケープ文字もPythonと全く同じ物が利用できます。 Python\nに慣れていれば、シェル特有の文字列リテラルのルールを覚える必要はありません。\nPythonと同様に3つの <code>\"</code> か <code>'</code>\nで囲まれた範囲はヒアドキュメントとなります。\n一方Pyshではその他のシェルと同様に、\"で囲まれた文字列中の変数および式($var,\n${expr})は 自動的に展開されます。</p>\n<h3 id=\"バッククオート\"><a href=\"#%E3%83%90%E3%83%83%E3%82%AF%E3%82%AF%E3%82%AA%E3%83%BC%E3%83%88\" aria-label=\"バッククオート permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>バッククオート</h3>\n<p>他のシェルと同じように、`` で囲まれたコマンドのパラメータに指定することで、 コマンドの実行結果を他のコマンドのパラメータとして利用することが可能です。</p>\n<h3 id=\"バックスラッシュ文字による行継続\"><a href=\"#%E3%83%90%E3%83%83%E3%82%AF%E3%82%B9%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E6%96%87%E5%AD%97%E3%81%AB%E3%82%88%E3%82%8B%E8%A1%8C%E7%B6%99%E7%B6%9A\" aria-label=\"バックスラッシュ文字による行継続 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>バックスラッシュ文字による行継続</h3>\n<p>Python や他のシェルと同じように、行の末尾にバックスラッシュ文字<code>\\</code>\nをつけると 改行が無視され次の行もつなげて１つの行として評価されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; echo foo\\\n    bar</code></pre></div>\n<h3 id=\"コメント\"><a href=\"#%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88\" aria-label=\"コメント permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コメント</h3>\n<p>Python と同様に Pysh では# より後ろの文字はコメントとして扱われます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo &#39;Hello world&#39; # This is a comment</code></pre></div>\n<h3 id=\"map-filter-reduce\"><a href=\"#map-filter-reduce\" aria-label=\"map filter reduce permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map filter reduce</h3>\n<p>ここからは他のシェルにはない pysh 独特の機能を紹介して行きましょう。\nPysh ではPythonのフィルタ系組み込み関数 map, filter, reduce\nに相当するコマンドが用意されています。</p>\n<ul>\n<li>map\nは標準入力の各行に対して引数で指定された関数を適用し結果を標準出力に出力します。</li>\n<li>filter\nは標準入力の各行に対して引数で指定された関数を適用し、関数が真を返した行のみを出力します。</li>\n<li>reduce\nは標準入力の各行を、引数で指定された関数を使って1つの値に累積的にまとめます。</li>\n</ul>\n<!-- -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; seq 10 | map ${lambda s: int(s) * int(s)}\n1\n4\n9\n...\n&gt; seq 10 | filter ${lambda s: int(s) % 3 == 0}\n3\n6\n9\n&gt; seq 10 | reduce ${lambda x, y: int(x) + int(y)}\n55</code></pre></div>\n<p>map, filter, reduce をPythonの関数と組み合わせて利用することで grep,\nsed, awk\nなどを使わなくてもフィルタリング・置換・変形を柔軟に実装できます。\nPython にある程度慣れていればいちいち sed や awk\nの使い方を思い出すよりも効率的に 置換/変形処理が実装できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># The lambda expr of reduce does not need to str() to convert input.\n&gt; seq 10 | map ${lambda s: int(s) * 2} | reduce ${lambda x, y: x + y}\n110</code></pre></div>\n<h3 id=\"リターンコードの保存\"><a href=\"#%E3%83%AA%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E4%BF%9D%E5%AD%98\" aria-label=\"リターンコードの保存 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リターンコードの保存</h3>\n<p>pysh ではコマンドに <code>-></code> をつけるとそのコマンドのリターンコードが <code>-></code>\nの後ろに指定された変数に保存されます。 他のシェルではリターンコードは\n<code>$?</code> に保存されてしまうため、\nパイプされているコマンドのそれぞれのリターンコードを参照することは困難ですが、\npysh ではパイプされているコマンドそれぞれに <code>-></code>\nをつけることができるので、\n簡単にそれぞれのコマンドのリターンコードを参照できます。 <code>&#x26;&#x26;</code> や <code>||</code>\nと共に利用され、<code>-></code>\nが指定されたコマンドの実行が行われなかった場合には、Noneが保存されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; (python -c &#39;import sys;sys.exit(2)&#39; -&gt; rc0\\\n    || python -c &#39;import sys;sys;exit(0)&#39; -&gt; rc1)\n&gt; print rc0, rc1  # 512 0</code></pre></div>\n<h3 id=\"pythonへのリダイレクション\"><a href=\"#python%E3%81%B8%E3%81%AE%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\" aria-label=\"pythonへのリダイレクション permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pythonへのリダイレクション</h3>\n<p>pysh ではコマンドの出力をファイルだけではなく Python\nの変数に対してリダイレクトすることが可能です。 Python\n変数に対してリダイレクトするには <code>=></code> を使います。\nコマンドの出力が各行が各要素として格納されたリストに変換され、Pythonの変数として保存されます。\n<code>-></code> と同様にコマンドが実行されなかった場合には <code>None</code> が保存されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; seq 5 | grep -v 3 =&gt; out\nprint out  # [&#39;1&#39;, &#39;2&#39;, &#39;4&#39;, &#39;5&#39;]\n&gt; send ${xrange(5)} | filter ${lambda i: i != 3} =&gt; out\nprint out  # [0, 1, 2, 4]</code></pre></div>\n<h3 id=\"echo\"><a href=\"#echo\" aria-label=\"echo permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>echo</h3>\n<p><code>=></code> とは逆に Pytnon 上のデータをシェルコマンドで利用するには <code>echo</code>\nコマンドを利用します。 pysh の <code>echo</code>\nコマンドはその他のシェルと同様に引数をスペースで区切った文字列を出力しますが、\n引数にリストやタプルなどの文字列以外の iterable\nなオブジェクトが渡された場合には、リスト・タプルの各要素を一行づつ分けて出力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; echo foo bar  # foo bar\ndata = [&#39;foo&#39;, &#39;bar&#39;]\n&gt; echo $data  # foo\n              # bar\n&gt; echo $data | sort # bar\n                    # foo</code></pre></div>\n<h3 id=\"組み込みコマンド-をpythonで実装する\"><a href=\"#%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89-%E3%82%92python%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\" aria-label=\"組み込みコマンド をpythonで実装する permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>組み込みコマンド をPythonで実装する</h3>\n<p>(to be continued....)</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/pysh_overview.html/#%E7%89%B9%E5%BE%B4\">特徴</a></li>\n<li>\n<p><a href=\"/docs/pysh_overview.html/#%E4%BD%BF%E3%81%84%E6%96%B9\">使い方</a></p>\n<ul>\n<li><a href=\"/docs/pysh_overview.html/#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">インストール</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C\">ファイルから実行</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C\">標準入力から実行</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E5%BC%95%E6%95%B0%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C\">引数から実行</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/docs/pysh_overview.html/#%E6%A9%9F%E8%83%BD\">機能</a></p>\n<ul>\n<li><a href=\"/docs/pysh_overview.html/#%E5%A4%89%E6%95%B0%E5%8F%82%E7%85%A7\">変数参照</a></li>\n<li><a href=\"/docs/pysh_overview.html/#python%E5%BC%8F\">Python式</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E3%83%91%E3%82%A4%E3%83%97\">パイプ</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\">リダイレクション</a></li>\n<li><a href=\"/docs/pysh_overview.html/#--\">&#x26;&#x26; || ;</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E6%96%87%E5%AD%97%E5%88%97%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB\">文字列リテラル</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E3%83%90%E3%83%83%E3%82%AF%E3%82%AF%E3%82%AA%E3%83%BC%E3%83%88\">バッククオート</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E3%83%90%E3%83%83%E3%82%AF%E3%82%B9%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E6%96%87%E5%AD%97%E3%81%AB%E3%82%88%E3%82%8B%E8%A1%8C%E7%B6%99%E7%B6%9A\">バックスラッシュ文字による行継続</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88\">コメント</a></li>\n<li><a href=\"/docs/pysh_overview.html/#map-filter-reduce\">map filter reduce</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E3%83%AA%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E4%BF%9D%E5%AD%98\">リターンコードの保存</a></li>\n<li><a href=\"/docs/pysh_overview.html/#python%E3%81%B8%E3%81%AE%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\">Pythonへのリダイレクション</a></li>\n<li><a href=\"/docs/pysh_overview.html/#echo\">echo</a></li>\n<li><a href=\"/docs/pysh_overview.html/#%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89-%E3%82%92python%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">組み込みコマンド をPythonで実装する</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Pysh シェルスクリプトをPythonで書く","lastmod":"2014-07-25T00:00:00.000Z","enable_toc":true},"fields":{"slug":"/docs/pysh_overview.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/pysh_overview.html"}}}