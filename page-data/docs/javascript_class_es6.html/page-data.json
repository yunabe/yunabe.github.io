{"componentChunkName":"component---src-templates-post-js","path":"/docs/javascript_class_es6.html","result":{"data":{"markdownRemark":{"html":"<p>JavaScript は<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Class-Based_vs._Prototype-Based_Languages\">プロトタイプベースの言語</a>であり、Java, C++, Python などのクラスベースの言語とは異なりクラスというものが存在しませんでした。しかしクラスベースのオブジェクト指向の書き方は人間に理解しやすくプログラムが書きやすく、何より他の人気のある言語の経験者にとって分かりやすいので、<a href=\"/docs/javascript_class_in_google.html\">プロトタイプを使ってクラスと同等なことを実現する</a>ということが JavaScript でも行われていました。\nそして、ついに 2015 年 6 月に標準仕様が発行された<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">ECMAScript 6(ES6)で JavaScript にも「クラス」の文法が追加されました</a>。\nプロトタイプベースの JavaScript でクラスに相当することは割りと簡単に実現できるので、そういう意味ではプロトタイプベースはより柔軟でクラスベースよりも表現力に優れていたのかもしれませんが、結局はほとんどの場合においてはクラスベースの考え方の方が人間に理解しやすく利用しやすかった...といったところでしょうか。</p>\n<h2 id=\"実行環境\"><a href=\"#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83\" aria-label=\"実行環境 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実行環境</h2>\n<p><a href=\"https://kangax.github.io/compat-table/es6/\">2015 年 10 月現在サポートが進んでいる最中</a>で最新のブラウザでも完全にはサポートされていません。</p>\n<ul>\n<li>Firefox は nightly builds でのみ有効になっている</li>\n<li>Chrome では 43 から class がサポートされている。ただし<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Strict_mode\">strict mode</a>でないと class が利用できません。\n<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Classes#Strict_mode\">class の内部が strict mode になるという仕様</a>とは書いてあるけれど、\nclass 自体は strict mode でなくても本来は使えるはず？</li>\n<li>(iOS) Safari は Safari9 からサポートされている。strict mode なしで使える。</li>\n</ul>\n<h2 id=\"クラスとコンストラクタの定義\"><a href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%A8%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%AE%E5%AE%9A%E7%BE%A9\" aria-label=\"クラスとコンストラクタの定義 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>クラスとコンストラクタの定義</h2>\n<p>ES6 では<code>class</code>キーワードを使ってクラスを定義します。<code>class</code>のブロックの中で<code>constructor</code>という名前の関数を定義するとそれがコンストラクタとして利用されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>クラスのインスタンスの生成とコンストラクタの呼び出しには new 演算子を使います。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> alice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ちなみに<code>new</code>は ES6 以前から JavaScript に存在する機能です。<code>new</code>の JavaScript 本来の仕様と使い方については<a href=\"/docs/javascript_class_in_google.html\">ES6 以前の JavaScript におけるクラスの実現方法を参考にしてください</a></p>\n<h2 id=\"メンバ変数-インスタンス変数\"><a href=\"#%E3%83%A1%E3%83%B3%E3%83%90%E5%A4%89%E6%95%B0-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0\" aria-label=\"メンバ変数 インスタンス変数 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メンバ変数 (インスタンス変数)</h2>\n<p>上の例で出てきているように、クラスの内部でメンバ変数を定義・参照するには<code>this.&#x3C;プロパティ名></code>を使います。JavaScript では Java や C++ と違い<strong>this を省略することは不可能</strong>なので注意してください。Python を知っている人は<code>this</code>は<code>self</code>に相当するものだと思うと分かりやすいかと思います。インスタンス変数やメソッド呼び出しの際に Python では<code>self</code>を付けなければならないように JavaScript では<code>this</code>が必ず必要です。</p>\n<h2 id=\"メソッド定義と呼び出し\"><a href=\"#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%AE%9A%E7%BE%A9%E3%81%A8%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\" aria-label=\"メソッド定義と呼び出し permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メソッド定義と呼び出し</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, I'm \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ES6 では class ブロックの中に<code>constructor</code>以外の名前の関数を定義するとメソッドになります。\nまたメソッド内から他のメソッドの呼び出しを行う場合は<code>this.&#x3C;メソッド名>(引数)</code>を使います。\nメンバ変数の場合と同様に、メソッド呼び出しの際に<strong>this を省略することは不可能</strong>なので気をつけて下さい.</p>\n<h3 id=\"private-protected\"><a href=\"#private-protected\" aria-label=\"private protected permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>private, protected</h3>\n<p>JavaScript でクラスを実現する場合、メンバ変数やメソッドを <code>private</code> や\n<code>protected</code> にすることはできません。 ただし名前規約で <code>private</code>\nなものを名前でわかりやすくして間違えてアクセスしないようにすることはできます。\n<a href=\"https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#Naming\">Google の JavaScript\nのスタイルガイド</a>\nでは private なメソッド, メンバ変数は名前の末尾に <code>_</code>\nをつけることが求められています。</p>\n<h2 id=\"継承\"><a href=\"#%E7%B6%99%E6%89%BF\" aria-label=\"継承 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>継承</h2>\n<p>クラスの継承は ES6 では以下のように行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 親クラスのコンストラクタ呼び出し</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// オーバーライド</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 親クラスのメソッド呼び出し</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ES6 JavaScript でクラスを継承するには<code>extends</code>を使います。<code>class Child extends Parent {...}</code></li>\n<li>小クラスのコンストラクタの中で親クラスのコンストラクタを呼び出すには<code>super(...)</code>を使います。</li>\n<li>子クラスで親クラスと同名のメソッドを定義すればメソッドがオーバーライドされます。\n子クラスから親クラスのメソッドを呼び出すには<code>super.methodName(...)</code>のようにします。</li>\n</ul>\n<h2 id=\"サンプル\"><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\" aria-label=\"サンプル permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>サンプル</h2>\n<iframe width=\"100%\" height=\"500\" src=\"//jsfiddle.net/tkaj9ggz/6/embedded/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>","tableOfContents":"<ul>\n<li><a href=\"/docs/javascript_class_es6.html/#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83\">実行環境</a></li>\n<li><a href=\"/docs/javascript_class_es6.html/#%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%A8%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%AE%E5%AE%9A%E7%BE%A9\">クラスとコンストラクタの定義</a></li>\n<li><a href=\"/docs/javascript_class_es6.html/#%E3%83%A1%E3%83%B3%E3%83%90%E5%A4%89%E6%95%B0-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0\">メンバ変数 (インスタンス変数)</a></li>\n<li>\n<p><a href=\"/docs/javascript_class_es6.html/#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%AE%9A%E7%BE%A9%E3%81%A8%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">メソッド定義と呼び出し</a></p>\n<ul>\n<li><a href=\"/docs/javascript_class_es6.html/#private-protected\">private, protected</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/javascript_class_es6.html/#%E7%B6%99%E6%89%BF\">継承</a></li>\n<li><a href=\"/docs/javascript_class_es6.html/#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">サンプル</a></li>\n</ul>","frontmatter":{"title":"ES6 における JavaScript のクラス定義","lastmod":"2015-10-27T00:00:00.000Z","enable_toc":null},"fields":{"slug":"/docs/javascript_class_es6.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/javascript_class_es6.html"}}}