{"data":{"markdownRemark":{"html":"<p>並行処理をプログラミングする方法は大別すると、\nスレッドなどを利用した同期処理的な書き方と\nイベントを利用した非同期処理的な書き方があります (イベントループ)。 最近\n<a href=\"http://www.kegel.com/c10k.html\">C10K問題</a> が有名になったことや、\nNode.js が流行っていて Node.js のメリットとしてイベントモデルであるため\nC10Kが解決されるというのが上げられていたりして、\nイベントモデルのスレッドに対する優位性が注目されることが多いように思います。</p>\n<p>しかし個人的な経験として、ある程度以上複雑なプログラムを書く場合、\nイベントモデルで非同期処理を多用してプログラムを書くとスレッドで同期処理を使ってプログラムを書いた場合に比べてプログラムの可読性・保守性が著しく悪くなり、\nバグが発生しやすくなるように感じます。\nしかも並行処理で起こるバグは特定の処理が特定の順序で実行された場合のみ起こるようなことが多く、\n再現性が低いのでデバッグが非常に面倒なことになります。\n個人的には並行処理の同時処理数が <em>10K</em> にもならず、\n排他制御のための処理のコストやコンテキストスイッチのコストが無視できないほどパフォーマンスが重要ならない\n多くのプログラムでは並行処理はイベントモデルではなくスレッドモデルで記述すべきだと思います。</p>\n<p>そこでイベントモデルの欠点・デメリットが体系的に整理されている <a href=\"http://www.cs.berkeley.edu/~brewer/papers/threads-hotos-2003.pdf\">Why\nEvents Are A Bad\nIdea</a>\nという2003年に書かれた論文を読んだので要点をまとめてみました。</p>\n<h2 id=\"論文の概要\"><a href=\"#%E8%AB%96%E6%96%87%E3%81%AE%E6%A6%82%E8%A6%81\" aria-label=\"論文の概要 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>論文の概要</h2>\n<p>スレッドモデルの場合、プログラムの状態\n(プログラムの実行位置や処理中のデータの内容)\nはプログラムカウンタとスタックによって管理されます。\nプログラムカウンタとスタックを使った状態を管理する部分のロジックは言語処理系が作成してくれます。\nまた並行している処理はカーネルによってスケジューリングされ、ある程度賢く順番に実行されます。</p>\n<p>一方で、イベントモデルではアプリケーションレベルでプログラムの状態管理とスケジューリングは全て自前で行うことになります。\nそのためイベントモデルでプログラムを書くとスレッドライブラリ・カーネル・言語処理系の実装によって引き起こされる数々の問題\n(例えばスレッド数の上限や、多数のスレッドによるパフォーマンス低下、コンテキストスイッチのコスト)\nを回避することができます。\nその代償として、イベントモデルではスレッドライブラリや言語処理系が提供する非常に便利な機能\n(関数呼び出し、例外処理、スケジューリング、デバッガ、etc..)\nが利用できなくなり、\n全て自前で実装し制御する必要があるのでプログラムが非常に複雑になってしまいます。まとめると</p>\n<ul>\n<li>\n<p>イベントモデルの長所</p>\n<ul>\n<li>スレッドライブラリ・カーネル・プログラミング言語処理系に存在する数々の問題を自前の実装で回避可能</li>\n</ul>\n</li>\n<li>\n<p>イベントモデルの短所</p>\n<ul>\n<li>スレッドライブラリ・プログラミング言語が提供してくれている便利な機能\n(関数呼び出しとか例外処理なども含まれる) が使えない。\n全て自前で実装する必要がありプログラムが不必要に複雑になりプログラムの可読性・保守性が落ちる。\n自前で実装するのでバグが多くなる。</li>\n</ul>\n</li>\n</ul>\n<p>ということになります。\nこの論文では2.2で「イベントモデルの長所」として知られている点が実は(あまり大きな)長所ではないとということを、\n3章で「イベントモデルの短所」を具体的に述べ、\nそれによっていかにプログラムが複雑で保守しづらいものになってしまうかを指摘しています。\n以下に各章の要点を簡潔にまとめます。</p>\n<h2 id=\"21-duality-revisited\"><a href=\"#21-duality-revisited\" aria-label=\"21 duality revisited permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 Duality Revisited</h2>\n<p>イベントモデルとスレッドモデルは<a href=\"http://ja.wikipedia.org/wiki/%E5%8F%8C%E5%AF%BE\">双対</a>である。</p>\n<h2 id=\"22-problems-with-threads\"><a href=\"#22-problems-with-threads\" aria-label=\"22 problems with threads permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 “Problems” with Threads</h2>\n<h3 id=\"performance\"><a href=\"#performance\" aria-label=\"performance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h3>\n<ul>\n<li>スレッドのスケジューリングのアルゴリズムにまずいところがあると困る。</li>\n<li>例えば O(n) のアルゴリズムとか（この論文が書かれた2003年時点ではGNU\nPthには存在したらしい、2014年現在はどうなのだろう）。</li>\n<li>これはスレッドモデルそのものも問題ではない。</li>\n</ul>\n<h3 id=\"control-flow\"><a href=\"#control-flow\" aria-label=\"control flow permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Flow</h3>\n<ul>\n<li>\n<p>スレッドモデルだと call/return パターン（普通の関数呼び出し +\nif-else, loop によるコントロールフロー）\nしか書けない。自由度が低いという批判が存在する。</p>\n</li>\n<li>\n<p>しかし、そもそもそんな複雑なモデルは使わない (We believe more\ncomplex patterns are not used because they are difficult to use\nwell.)。 Control Flow は大別すると</p>\n<ol>\n<li>call/return</li>\n<li>parallel calls</li>\n<li>pipeline</li>\n</ol>\n<p>に分けられるが、どれもスレッドモデルで書いたほうがずっと自然に書ける。</p>\n</li>\n</ul>\n<h3 id=\"synchronization\"><a href=\"#synchronization\" aria-label=\"synchronization permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Synchronization</h3>\n<ul>\n<li>イベントモデルだと synchchronization\nが不要で単純で済むという主張について。</li>\n<li>それはイベントモデルだとタスクが no preemption (cooperative\nmultitasking) だからだよね。 スレッドも preemption\nが起こらないような実装 (cooperative thread systems)\nにしたら同じメリットがあるよ。 しかも multiprocessors\nの場合は成り立たないよね (とすでに2003年に言われている.\n2011年10月に出た iPhone4s からは携帯ですらマルチコアである)</li>\n</ul>\n<h3 id=\"state-management\"><a href=\"#state-management\" aria-label=\"state management permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Management</h3>\n<ul>\n<li>スレッドごとに stack 作るから仮想メモリ空間が足りなくなる\n。stackサイズを小さくするとstack overflowする。</li>\n<li>イベント方式だとプログラマが state\nの管理を自前でする必要があるので、無駄なstateが保持されないで済む。</li>\n<li>論文では言及されてないけど、仮想メモリ不足に関しては64bitになるとどうでもよくなる。</li>\n<li>2番目の点に関しては、まあイベント特有のメリットと言えるかも。\nスレッドでもプログラマが注意すればstateは小さくできるけど、プログラマが注意しないと簡単に無駄なstateが保持されるから。</li>\n</ul>\n<h3 id=\"scheduling\"><a href=\"#scheduling\" aria-label=\"scheduling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling</h3>\n<p>スケジューリングがアプリケーションレベルで行えるので、\nイベント方式だとアプリケーションレイヤの知識を利用してスケジューリングを最適化する余地がある。\n例えば同種のイベントをまとめて処理すると code locality を上げられるなど\n（逆に同じデータは同じプロセッサで処理したほうが data locality\nが上がってよいケースもあるだろう）。</p>\n<h2 id=\"3-the-case-for-threads\"><a href=\"#3-the-case-for-threads\" aria-label=\"3 the case for threads permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3 The Case for Threads</h2>\n<p>大体の場合 concurrent requests はそもそも独立して処理される。</p>\n<h3 id=\"control-flow-1\"><a href=\"#control-flow-1\" aria-label=\"control flow 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Flow</h3>\n<p>イベントモデルだとプログラム理解する際に プログラマがプログラムを\ncall-return のパターンに頭の中でマッチさせなくてはいけない (The\nprogrammer must mentally match these call/return pairs)。\nまたイベントモデルで書く場合、stateの保持を自分で書かなくてはならならず(stack\nripping)、 これがイベントモデルを使う際の大きな重荷となる\n(実際そう思う)。 あと、control flow\nが形式的に縛られなくなることで本来1つしか届かないメッセージが複数呼び出される(あるいはコールバックが必要以上に呼び出される)\nような問題が起こりやすい\n(言語やライブラリの仕様としてそういう事態を防ぐのは困難)。\nあと既存のデバッグツールとの相性がよい（例えばスタックの状態の表示とか。イベントモデルで自前で状態管理してるとそういったツールからは扱いづらい）。</p>\n<h3 id=\"exception-handling\"><a href=\"#exception-handling\" aria-label=\"exception handling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception Handling</h3>\n<p>例外発生時の処理とかややこしいから言語の機能をそのまま使える thread モデルのほうがよいよねという。 control flow の派生の話.</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#%E8%AB%96%E6%96%87%E3%81%AE%E6%A6%82%E8%A6%81\">論文の概要</a></li>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#21-duality-revisited\">2.1 Duality Revisited</a></li>\n<li>\n<p><a href=\"/docs/why_events_are_a_bad_idea.html/#22-problems-with-threads\">2.2 “Problems” with Threads</a></p>\n<ul>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#performance\">Performance</a></li>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#control-flow\">Control Flow</a></li>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#synchronization\">Synchronization</a></li>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#state-management\">State Management</a></li>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#scheduling\">Scheduling</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/docs/why_events_are_a_bad_idea.html/#3-the-case-for-threads\">3 The Case for Threads</a></p>\n<ul>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#control-flow-1\">Control Flow</a></li>\n<li><a href=\"/docs/why_events_are_a_bad_idea.html/#exception-handling\">Exception Handling</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"イベントはスレッドに比べて何故ダメなのか (Why Events Are A Bad Idea)","lastmod":"2014-05-19T00:00:00.000Z","enable_toc":null},"fields":{"slug":"/docs/why_events_are_a_bad_idea.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/why_events_are_a_bad_idea.html"}}