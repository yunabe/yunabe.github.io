{"data":{"markdownRemark":{"html":"<h2 id=\"bufioscanner\"><a href=\"#bufioscanner\" aria-label=\"bufioscanner permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bufio.Scanner</h2>\n<p>Go言語 (golang) では<code>bufio.Scanner</code>を使ってファイル/標準入力からテキストを一行ずつ読み込みます。\n<code>bufio.NewScanner</code> で <code>*file.File</code> から <code>Scanner</code> を作成し、<code>Scan()</code> がファイルの末尾に達して<code>false</code>を返すまで for ループを回します。\n行の内容は <code>Text()</code> で<code>stirng</code>として取得できます。<code>Text()</code>の返り値の末尾には改行文字(<code>'\\n'</code>)は含まれないので改行文字を削除するために<code>strings.Trim</code>を呼ぶ必要などもありません。\nファイルの終端に正常に到達したかを念の為に確かめたい場合は、<code>s.Err()</code>をチェックして下さい。\n正常にファイルの末尾まで読み込まれた場合は<code>s.Err()</code>は<code>nil</code>を返します。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">readLines</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    s <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// non-EOF error.</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"標準入力から読む\"><a href=\"#%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E3%81%8B%E3%82%89%E8%AA%AD%E3%82%80\" aria-label=\"標準入力から読む permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>標準入力から読む</h2>\n<p>標準入力から文字列を読み込む場合は、<code>os.Open(...)</code>の代わりに<code>os.Stdin</code>を利用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">readLines</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// non-EOF error.</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"bufioreader\"><a href=\"#bufioreader\" aria-label=\"bufioreader permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bufio.Reader</h2>\n<p><code>bufio.Scanner</code>の方がシンプルですが、<code>bufio.Reader</code>を使って一行ずつファイルを読むことも出来ます。\n<code>bufio.Reader</code>を使う場合は<code>ReadLine()</code>ではなくて<code>ReadString('\\n')</code>を使うという点に注意して下さい。\n<code>ReadString('\\n')</code>の返り値の末尾には改行文字<code>'\\n'</code>が含まれるので必要ない場合は<code>strings.TrimLeft</code>などで改行文字を取り除く必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">readLines</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>file<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// line includes '\\n'.</span>\n        line<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Quote</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/tips/golang_readlines.html/#bufioscanner\">bufio.Scanner</a></li>\n<li><a href=\"/tips/golang_readlines.html/#%E6%A8%99%E6%BA%96%E5%85%A5%E5%8A%9B%E3%81%8B%E3%82%89%E8%AA%AD%E3%82%80\">標準入力から読む</a></li>\n<li><a href=\"/tips/golang_readlines.html/#bufioreader\">bufio.Reader</a></li>\n</ul>","frontmatter":{"title":"Go でファイルや標準入力からテキストを一行ずつ読む","lastmod":"2015-08-04T00:00:00.000Z","enable_toc":null},"fields":{"slug":"/tips/golang_readlines.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tips/golang_readlines.html"}}