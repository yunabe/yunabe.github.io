{"data":{"markdownRemark":{"html":"<p>Pythonのメタプログラミング (__metaclass__) は組み込み関数 <code>type</code>\nの普段利用しない隠れた機能や、 普通は利用しない特殊メソッド <code>__new__</code>\nなどを理解する必要があり 理解するのが結構難しい。\nあまり関連情報がまとまってるドキュメントがなくて理解するのに苦労したので情報をまとめておきました。</p>\n<h2 id=\"事前知識\"><a href=\"#%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98\" aria-label=\"事前知識 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>事前知識</h2>\n<p><a href=\"https://docs.python.org/2/reference/datamodel.html#customizing-class-creation\">Customizing class creation</a>\n(<a href=\"http://docs.python.jp/2/reference/datamodel.html#metaclasses\">日本語:クラス生成をカスタマイズする</a>)\nを読むと、型を取得するのに普通利用するbuiltin関数 <code>type</code>\nを継承していたり、 普通利用することのない <code>__new__</code>\nが定義されていたりして、 <code>type</code> の隠された機能と <code>__new__</code>\nについて理解していないと\n何が書かれているかさっぱり分からないと思います。 まずは <code>__metaclass__</code>\nを理解する上で重要なこの2つについて整理しておきましょう。</p>\n<h3 id=\"type-とクラス定義のあまり知られていない関係\"><a href=\"#type-%E3%81%A8%E3%82%AF%E3%83%A9%E3%82%B9%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%81%82%E3%81%BE%E3%82%8A%E7%9F%A5%E3%82%89%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E9%96%A2%E4%BF%82\" aria-label=\"type とクラス定義のあまり知られていない関係 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>type とクラス定義のあまり知られていない関係</h3>\n<p>ご存知のように Python には <code>type</code> という builtin\n関数が定義されています。 type は <code>type(obj)</code> のように1つの引数を与えて\nobj の型を取得するのに利用したことがあるはずです。\n普通はこちらの機能しか使いません。</p>\n<p>しかし実は type にはもう一つの隠れた機能があります。\n<a href=\"http://docs.python.jp/2/library/functions.html#type\">第1引数に文字列でクラス名、第2引数に親クラスの列、第3引数にクラスのメソッドや属性を定義した\ndict を渡して type\nを呼び出すとクラスを動的に定義することが可能です。</a></p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">(</span>P0<span class=\"token punctuation\">,</span> P1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  attrivute1 <span class=\"token operator\">=</span> value1\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">function1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>のように普段クラスを定義していると思いますが、これは <code>type</code> を使うと:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">function1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nClassName <span class=\"token operator\">=</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ClassName'</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token punctuation\">[</span>P0<span class=\"token punctuation\">,</span>P1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token punctuation\">{</span><span class=\"token string\">'attribute1'</span><span class=\"token punctuation\">:</span> value1<span class=\"token punctuation\">,</span>\n                  <span class=\"token string\">'function1'</span><span class=\"token punctuation\">:</span> function1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>のように定義することも可能です。この2つの定義は全く同じ実行結果が得られます。\nここで2つ目の type を使った定義をよく見てみると、 実は ClassName は type\nクラスにクラス名、親クラス、クラス定義を渡してインスタンス生成\nしたものだということが分かります。クラスは <strong>type のインスタンス</strong>\nなのです。 その証拠に <code>type(cls)</code> は <code>type</code> を返しますし、\n<code>isinstance(cls, type)</code> は True を返します。</p>\n<h3 id=\"特殊メソッド-__new__\"><a href=\"#%E7%89%B9%E6%AE%8A%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89-__new__\" aria-label=\"特殊メソッド __new__ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特殊メソッド __new__</h3>\n<p>Python\nでクラスを定義する際、インスタンスを初期化するメソッドとして普通は\n<code>__init__</code> を定義します。 厳密には Python\nには「コンストラクタ」という用語はありませんが、 C++/Java\nにおけるコンストラクタに相当する処理は普通 <code>__init__</code> に書かれます。\nしかし実は Python にはインスタンスの生成方法を定義するもう一つの\n<a href=\"https://docs.python.org/2/reference/datamodel.html#object.__new__\">特殊メソッド\n__new__</a>\nが存在します (<a href=\"http://docs.python.jp/2/reference/datamodel.html#object.__new__\">__new__\nの日本語のドキュメント</a>)。</p>\n<p>Python でクラスを定義して、それを呼び出してインスタンスの生成を行うと\n<code>__init__</code> が\n暗黙的に呼び出されインスタンスの初期化が行われると理解していると思いますが、\n実はその前に <code>__new__</code> による処理が存在しています。\nクラスのインスタンス生成を行った際に暗黙的に行われている処理はより正確に書くと</p>\n<ul>\n<li><code>class ClassName</code> が <code>ClassName()</code>\nによってインスタンス生成された場合</li>\n<li>まず <code>ClassName.__new__</code> が第1引数に ClassName, 残りの引数に\nClassName に与えた残りの引数が与えられて呼び出される。</li>\n<li>普通は <code>__new__</code>\nは定義されていないので親クラスをたどっていって最終的に\n<code>object.__new__</code> が呼び出される。<code>object.__new__</code>\nは第1引数で与えられた\nクラスのインスタンスを生成して返す。<code>object.__new__</code>\nが返すインスタンスは <code>__init__</code>\nが実行される前の未初期化のインスタンスである点に注意。</li>\n<li><code>__new__</code> が ClassName のインスタンスを返した場合に限り\n<code>ClassName.__init__</code> が呼び出される。</li>\n</ul>\n<p>というようになっています。 例えばものすごく極端な例ですが:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'__init__'</span>\n\nc <span class=\"token operator\">=</span> C<span class=\"token punctuation\">(</span><span class=\"token number\">43</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></code></pre></div>\n<p>のようなコードを書くと、<code>c</code> には <code>'43'</code> が代入されます。 そして\n<code>__init__</code> は呼び出されません。</p>\n<p><code>__new__</code> の役割はかなり理解しづらいと思うので\nよくドキュメントを読んでサンプルを書いて動かしていろいろ試してみたほうがよいかと思います。\n個人的には ClassNameを呼び出すと <code>__init__</code> が暗黙的に呼び出されるという\n先入観が強すぎるせいか、 <code>__new__</code>\nで何が制御できるのか理解するのがなかなか大変でした。</p>\n<h2 id=\"__metaclass__\"><a href=\"#__metaclass__\" aria-label=\"__metaclass__ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>__metaclass__</h2>\n<p>class を定義すると自動的に <code>type('ClassName', ...)</code>\nが呼び出されてクラスが生成されるということを type の節で述べました。\n実は Python ではこの class\nを定義される際に暗黙的に呼び出される関数を別の関数で置き換えることができます。\nこれが\n<a href=\"https://docs.python.org/2.7/reference/datamodel.html#__metaclass__\">__metaclass__</a>\nです (<a href=\"http://docs.python.jp/2/reference/datamodel.html#__metaclass__\">__metaclass__\nの日本語のドキュメント</a>)。</p>\n<p>classの定義に <code>__metaclass__</code> が存在するとクラスを生成する際に\n<code>__metaclass__</code> に格納された関数が <code>type</code> の代わりに呼び出されます。\nmetaclass という名前がついていますが、<code>__metaclass__</code> は class\nである必要はありません。 <code>type</code> と同様の引数を受け取れる callable\nなオブジェクトならば何でも <code>__metaclass__</code> として利用できます。 例えば</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">tolower_classname</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  __metaclass__ <span class=\"token operator\">=</span> tolower_classname\n\n  <span class=\"token keyword\">print</span> ClassName<span class=\"token punctuation\">.</span>__name__  <span class=\"token comment\"># classname</span></code></pre></div>\n<p>のようなコードを書くと、ClassName の名前が 'classname' になります\n(classname というクラスが ClassName という変数に格納されている状態)。</p>\n<h3 id=\"typeの継承\"><a href=\"#type%E3%81%AE%E7%B6%99%E6%89%BF\" aria-label=\"typeの継承 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeの継承</h3>\n<p>ただそれだと metaclass\nという名称とマッチしないので、実際にはtypeを継承したクラスを作成してそれを\n<code>__metaclass__</code> に指定するのが一番自然なのではないかと思います。\nその場合、 <code>__metaclass__</code>\nに指定されたクラスのインスタンスとしてクラスが作成されるようになるので、\nクラス作成をカスタマイズするには <code>__metaclass__</code> に指定したクラスの\n<code>__new__</code> もしくは <code>__init__</code> をカスタマイズすることになります。</p>\n<p><code>type</code> は <code>__init__</code> ではなく <code>__new__</code>\nメソッドの方でクラス生成の主な作業を行っています (<a href=\"http://svn.python.org/projects/python/trunk/Objects/typeobject.c\">typeobject.c\nソースコード</a>)。\nそのため、 <code>type</code> の挙動をカスタマイズするには、普段オーバーライドする\n<code>__init__</code> ではなくて、 <code>__new__</code>\nメソッドをオーバーライドする必要があります。 そして <code>type.__new__</code>\nを呼び出す前に引数の <code>name</code>, <code>bases</code>, <code>dict</code>\nを編集してクラス生成をカスタマイズすることになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">mymeta</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># TODO: customize name, bases, dict.</span>\n    <span class=\"token builtin\">type</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"メタクラスの例\"><a href=\"#%E3%83%A1%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E4%BE%8B\" aria-label=\"メタクラスの例 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メタクラスの例</h2>\n<p><code>__metaclass__</code>\nでどんなことができるのか理解するには例をみてみるのが一番だと思うので、\nメタクラスのサンプルとして、<code>__metaclass__</code> に指定すると getter/setter\nっぽい名前のメソッド (e.g. <code>get_name</code>, <code>getName</code>, <code>SetName</code>) を自動的に\n<a href=\"http://docs.python.jp/2/library/functions.html#property\">プロパティ</a>\nに変換してくれるメタクラス <a href=\"https://github.com/yunabe/practice/tree/master/python/metaclass/\">auto_property\n(ソースコード)</a>\nを作成しました。 例えば <code>get_x</code>\nというメソッドを持つクラスに指定すると、アクセスすると <code>get_x</code>\nが呼び出されるプロパティ <code>x</code> が自動的に生成されます。 （逆に <code>get_x</code>\nはメソッドから消えます）</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  __metaclass__ <span class=\"token operator\">=</span> auto_property\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">get_x</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">123</span>\n\nc <span class=\"token operator\">=</span> C<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> c<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> <span class=\"token number\">123</span></code></pre></div>\n<h2 id=\"実装の解説\"><a href=\"#%E5%AE%9F%E8%A3%85%E3%81%AE%E8%A7%A3%E8%AA%AC\" aria-label=\"実装の解説 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実装の解説</h2>\n<p>まずは <code>type</code> を継承したクラス auto_property を定義します。 そして\n<code>__new__</code> の中で引数として受け取ったクラス定義の辞書 <code>dict</code>\nをカスタマイズしてから、 <code>type.__new__</code> を呼び出します。</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">auto_property</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> classname<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># TODO: dict から setter/getter っぽい名前のメソッドを取り除いて、</span>\n    <span class=\"token comment\">#       代わりに対応する property を持つ new_dict を作成する</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> classname<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> new_dict<span class=\"token punctuation\">)</span></code></pre></div>\n<p>後は、 TODO の部分で <code>dict</code> に対して for文を回して正規表現を使って\ngetter/setter と property 名を取り出して、 最後に <code>new_dict</code> に対して\n<code>property(getter, setter)</code> を代入するだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">auto_property</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> classname<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    new_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    setters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    properties <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">:</span>\n      value <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n      <span class=\"token comment\"># TODO: setter/getter を正規表現で検出</span>\n\n    <span class=\"token keyword\">for</span> property_name <span class=\"token keyword\">in</span> properties<span class=\"token punctuation\">:</span>\n      getter <span class=\"token operator\">=</span> getters<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>property_name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n      setter <span class=\"token operator\">=</span> setters<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>property_name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n      new_dict<span class=\"token punctuation\">[</span>property_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">property</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">,</span> setter<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> classname<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> new_dict<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://github.com/yunabe/practice/tree/master/python/metaclass/\">githubにソースコードをコミットしてある</a>\nので、実装の細かい部分はそちらを確認して下さい。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/docs/python_metaclass.html/#%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98\">事前知識</a></p>\n<ul>\n<li><a href=\"/docs/python_metaclass.html/#type-%E3%81%A8%E3%82%AF%E3%83%A9%E3%82%B9%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%81%82%E3%81%BE%E3%82%8A%E7%9F%A5%E3%82%89%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E9%96%A2%E4%BF%82\">type とクラス定義のあまり知られていない関係</a></li>\n<li><a href=\"/docs/python_metaclass.html/#%E7%89%B9%E6%AE%8A%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89-__new__\">特殊メソッド __new__</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/docs/python_metaclass.html/#__metaclass__\">__metaclass__</a></p>\n<ul>\n<li><a href=\"/docs/python_metaclass.html/#type%E3%81%AE%E7%B6%99%E6%89%BF\">typeの継承</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/python_metaclass.html/#%E3%83%A1%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E4%BE%8B\">メタクラスの例</a></li>\n<li><a href=\"/docs/python_metaclass.html/#%E5%AE%9F%E8%A3%85%E3%81%AE%E8%A7%A3%E8%AA%AC\">実装の解説</a></li>\n</ul>","frontmatter":{"title":"Python の メタプログラミング (__metaclass__, メタクラス) を理解する","lastmod":"2015-01-14T00:00:00.000Z","enable_toc":true},"fields":{"slug":"/docs/python_metaclass.html"}},"site":{"siteMetadata":{"title":"yunabe.jp"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/python_metaclass.html"}}