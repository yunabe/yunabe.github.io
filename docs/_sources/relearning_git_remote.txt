Git リモート再入門
==================

.. container:: editdate

  更新 2014年6月10日

.. contents:: 目次
   :depth: 3
   :local:


この文書の目的
--------------
- 別の場所にある git レポジトリ（リモートレポジトリ）と連携する方法について再学習します。
- はじめに git remote, git fetch, git merge を使ってリモートレポジトリの内容を手元のレポジトリ（ローカルレポジトリ）に取り込む方法について学習します。
- 次に git fetch, git merge を使った一連の作業を自動的に行なってくれる git pull について学習します。
- 次に git push を使ってローカルレポジトリの内容をリモートレポジトリに書き出す方法について 学習します。
- 最後に, トラッキングブランチ (tracking branch) について理解し、 git pull, git push の引数を省略した際のデフォルトの挙動のルールについて学びます。

対象とする人
------------
- 入門本でリモート, push, pull について読んだけど何が「プッシュ」されてなにが「プル」されるのか、よく分からなかった人。
- `2.5 Git の基本 - リモートでの作業 <http://git-scm.com/book/ja/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%A7%E3%81%AE%E4%BD%9C%E6%A5%AD>`_ や
  `3.5 Git のブランチ機能 - リモートブランチ <http://git-scm.com/book/ja/Git-%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E6%A9%9F%E8%83%BD-%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81>`_ を読んで何となく分かったけれど、理解を再確認したい人。
- ``git pull`` と ``git push`` を使って1人で github を使ってるけど、実は ``git pull``, ``push`` が何をしているのかよく理解していない人。
- ``git pull/push`` と ``fetch/merge`` の関係を理解していない人
- ``git pull/push`` で 「fast-forwardナンタラカンタラ」とかエラーが出てもそれが何なの分かっていない人。
  それの解決方法 （例えば git fetch && git merge origin/master）が何故それでうまくいくのかきちんと説明できない人
- ``git push/pull`` の引数が省略された場合のデフォルトの動作を厳密に説明出来ない人
  「リモートトラッキングブランチ」と「トラキングブランチ」がそれぞれ何であるか説明できない人

下準備
------
アリスとボブが2人で自分たちの部門の紹介ページを作ろうとしてるとしています。アリスは git レポジトリーを作ってその上で部門の紹介ページの作成を開始しました。
まずはアリスになったつもりでレポジトリーを作成して、紹介ページを作ってコミットしましょう （``/tmp/my/workingdir`` は好きなディレクトリに置き換えて下さい）。

::

  $ cd /tmp/my/workingdir
  $ mkdir alice
  $ cd alice
  $ git init
  Initialized empty Git repository in /tmp/my/workingdir/alice/.git/

これでレポジトリができました。まず自分の紹介ページを作ってコミットしましょう。

::

  $ echo "I’m Alice." >> alice.txt
  $ git add alice.txt
  $ git commit -m "Added alice.txt"
  [master (root-commit) 8f6e1d0] Added alice.txt
   1 file changed, 1 insertion(+)
   create mode 100644 alice.txt

次にメンバー一覧ページも作ってコミットします。

::

  $ echo "Alice <alice.txt>" >> members.txt
  $ git add members.txt
  $ git commit -m "Added Alice to members.txt"
  [master 9e73b53] Added Alice to members.txt
   1 file changed, 1 insertion(+)
   create mode 100644 members.txt

アリスが紹介ページを作り始めたのを知らずに、ボブも紹介ページを手元で作りはじめてしまいました。今度はボブになったつもりでレポジトリの作成とコミットを行います。

::

  $ cd /tmp/my/workingdir
  $ mkdir bob
  $ cd bob
  $ git init
  Initialized empty Git repository in /tmp/my/workingdir/alice/.git/

  $ echo "I’m Bob." > bob.txt
  $ git add bob.txt
  $ git commit -m "Added bob.txt"
  [master (root-commit) 527df0c] Added bob.txt
   1 file changed, 1 insertion(+)
   create mode 100644 bob.txt

  $ echo "Bob <bob.txt>" > members.txt
  $ git add members.txt
  $ git commit -m "Added Bob to members.txt"
  [master f3bc482] Added Bob to members.txt
   1 file changed, 1 insertion(+)
   create mode 100644 members.txt

アリスとボブがそれぞれ手元で紹介ページをある程度作ったところで、アリスとボブはお互いが別々の場所で紹介ページの作成をしていたことに気が付きます。アリスとボブはそれぞれが手元で作ったコミットを相手と共有しなければなりません。こうしたケースに対処するために git では「リモート」という仕組みと、``git fetch``, ``pull``, ``push`` といったコマンドが用意されています。

.. image:: https://docs.google.com/drawings/d/1k9ZFqZb2xSvMwTKi-74YtbczJr9uDgbMG6DfT9wyCmI/pub?w=756&amp;h=728
   :height: 378px
   :width: 364px

リモート (Remote)
-----------------
git では別の場所にあるレポジトリ（以下リモートレポジトリ）を手元のレポジトリ（以下ローカルレポジトリ）と連携させることができます。
リモートレポジトリとローカルレポジトリの連携により、リモートレポジトリにあるコミットをローカルレポジトリに持ってきたり、
逆にローカルレポジトリで行ったコミットをリモートレポジトリに書き出すことができます。

リモートレポジトリの登録と読み込み
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
リモートレポジトリ と連携するために、まずローカルレポジトリにリモートレポジトリを登録する必要があります。
リモートレポジトリの登録には ``git remote add`` を利用します。

::

  git remote add <name> <URL>

現在ローカルレポジトリに登録されているリモートレポジトリの一覧は ``git remote`` で確認することができます。
各 remote の、例えばURLなどの、詳細な情報 は ``git remote show <remote>`` で確認できます。

リモートレポジトリにあるコミットを読み込んでみましょう。リモートレポジトリにあるコミットは ``git fetch <remote>`` でローカルレポジトリにロードすることができます。
git fetch でコミットをロードすると、リモートレポジトリ上のブランチに対応する「リモートトラキングブランチ」という特殊なブランチが自動的に作成されます（ブランチはコミットに対するポインタであることに注意して下さい）。
リモートトラッキングブランチの名前は ``<remote>/<branch>`` という名前になります。現在のレポジトリにあるリモートトラッキングブランチの一覧は ``git branch -r`` で確認できます。

.. TODO(yunabe): 存の branch と衝突すると?

アリスとボブのケースに戻りましょう。ボブはアリスが紹介ページを自分の作っているものにマージすることにしました。
ボブはアリスのレポジトリー上のコミットを取り込むために、まずアリスのレポジトリを自分のレポジトリに「リモートレポジトリ」として登録します。

::

  $ cd /tmp/my/workingdir/bob
  $ git remote add alice /tmp/my/workingdir/alice

  $ git remote
  alice
  $ git remote show alice
  * remote alice
    Fetch URL: /tmp/my/workingdir/alice
    Push  URL: /tmp/my/workingdir/alice
    HEAD branch: master
    Remote branch:
      master new (next fetch will store in remotes/alice)
    Local ref configured for 'git push':
      master pushes to master (local out of date)

次にアリスのレポジトリをフェッチします。

::

  $ git fetch alice
  warning: no common commits
  remote: Counting objects: 6, done.
  remote: Compressing objects: 100% (3/3), done.
  remote: Total 6 (delta 0), reused 0 (delta 0)
  Unpacking objects: 100% (6/6), done.
  From /tmp/my/workingdir/alice
   * [new branch]      master     -> alice/master
  $ git branch -r
    alice/master

bob のレポジトリの状態を図を書くと次のようになります。
レポジトリ alice からコミットがコピーされており、master ブランチの代わりに ``alice/master`` という「リモートトラッキングブランチ」が作成されていることに注意して下さい。

.. image:: https://docs.google.com/drawings/d/1aw6WitGt4TCLuqi2812vPdU_K8MPSh_C8XiZUHXeg-w/pub?w=1321&amp;h=664
   :height: 332px
   :width: 660px

リモートトラキングブランチを扱う
--------------------------------
これで ``git remote add`` と ``git fetch`` で別の場所にあるレポジトリを登録し、そこからコミットを読み込むことができました。
その際にリモートレポジトリ上のブランチに対応する ``<remote>/<branch>`` という名前の「リモートトラキングブランチ」が自動的に作られることが分かりました。

「リモートトラッキングブランチ」(e.g. ``origin/master``) は通常のブランチ (e.g. ``master``) や ``HEAD``, ``HEAD^``, コミットのハッシュID (``198bc17aade``),
タグと同様に手元のレポジトリに保存されているコミットに対するポインタです。
そのため前章で学んだような ``git checkout``, ``git merge``, ``git branch`` のようなコマンドはリモートトラッキングブランチに対しても変わらず利用できます。

::

  git log alice/master

でボブはリモートレポジトリ（アリスのレポジトリ）上の ``master`` ブランチのログを見ることができます。

::

  git checkout alice/master

とするとボブはアリスのレポジトリの ``master`` ブランチの最新の状態を再現することができます
（ただし ``You are in 'detached HEAD' state.`` と言われてこのままでは編集作業ができないことに注意）。

リモートトラッキングブランチとマージする
----------------------------------------
次にリモートトラッキングブランチ（リモートレポジトリ上のブランチ）をローカルのブランチにマージしてみましょう。
これはローカルでブランチをマージした場合と全く同じようにできます。

ボブはアリスの master ブランチを自分の master ブランチにマージすることにしました。
マージしようとしている2つのコミットに共通する先祖が存在しない点が、ローカルのみで作業していた場合と少し違いますが、
これはファイルが何もない「初期状態」が共通の親として暗黙的存在すると考えれば特に問題はないかと思います。

::

  $ git checkout master
  $ git merge alice/master
  Auto-merging members.txt
  CONFLICT (add/add): Merge conflict in members.txt
  Automatic merge failed; fix conflicts and then commit the result.

members.txt はアリスとボブ両方のレポジトリで編集されていたのでコンフリクトが発生します。
適当にコンフリクトを解消します。このあたりの作業もローカルのブランチをマージする場合となにも変わりません。

::

  $ emacs members.txt # 適当なエディタで衝突を解消
  $ git add members.txt
  $ git commit
  [master 5de7b36] Merge remote-tracking branch 'alice/master'

これで無事、ボブはアリスが行った変更を自分のレポジトリに取り込むことができました。ボブのレポジトリの状態は図で書くと以下のようになります

.. image:: https://docs.google.com/drawings/d/1-ChqglgHp_OTeNlqVnDQyZLYHxA2o6oBm3Vlspxald0/pub?w=1007&amp;h=644
   :height: 322px
   :width: 503px

git pull
--------
今度はアリスの立場になってボブのレポジトリ上のmaster ブランチをローカルレポジトリの masterブランチにマージしましょう。
ボブがアリスのコミットを読み込んだ時と同じようにまずはリモートレポジトリを ``git remote add`` で登録します。
続いて、git fetch と git merge を実行すれば前述したようにボブのレポジトリ上のmasterブランチをローカルレポジトリの master ブランチにマージすることが出来ます。
この fetch → merge という一連の処理は非常に頻繁に行われるので、これを一度に行う ``git pull`` というコマンドが用意されています。

::

  $ git pull <remote> <src>

このコマンドを実行すると ``git fetch <remote>`` → ``git merge <remote>/<src>`` を実行した場合と同じようにリモートレポジトリ <remote> 上の <src> ブランチが
現在のブランチにマージされます（厳密には git fetch <remote> <src> → git merge FETCHED_HEAD）。

::

  $ cd /tmp/my/workingdir/alice
  $ git remote add bob /tmp/my/workingdir/bob
  $ git pull bob master
  remote: Counting objects: 11, done.
  remote: Compressing objects: 100% (5/5), done.
  remote: Total 9 (delta 0), reused 0 (delta 0)
  Unpacking objects: 100% (9/9), done.
  From /tmp/my/workingdir/bob
   * branch            master     -> FETCH_HEAD
   * [new branch]      master     -> bob/master
  Updating 9e73b53..5de7b36
  Fast-forward
   bob.txt     | 1 +
   members.txt | 1 +
   2 files changed, 2 insertions(+)
   create mode 100644 bob.txt

また後述するように ``git pull`` は引数を省略することができるので、日常の業務で利用するには ``git fetch`` と ``merge`` をばらばらに実行するよりも便利です。

.. image:: https://docs.google.com/drawings/d/1ArgcrHHHctjQnkAMqqxqqKXrtxdWOCmpVBJ3IdiYJGA/pub?w=1010&amp;h=545
   :height: 272px
   :width: 505px

ここまでのまとめ
----------------
- 別の場所にあるgit レポジトリ（リモートレポジトリ）と連携するための仕組みとして git には「リモート」というものが用意されています。
- リモートレポジトリと連携するには、まずローカルレポジトリに登録するリモートレポジトリを登録します。これには ``git remote add <name> <url>`` を利用します。
- リモートレポジトリ上のコミットを ``git fetch`` でロードすることができます。
  この際、リモートレポジトリ上のブランチに対応する「リモートトラッキングブランチ」が自動的に作成されます。
  リモートトラッキングブランチの名前は ``<remote>/<branch>`` (e.g. ``alice/master``) となります。
- git fetch で取り込んだ後は、リモートトラッキングブランチという特殊なブランチがある以外は単一のレポジトリで作業している場合全く同じように作業できる。 リモートレポジトリ上で行われたコミットを手元のブランチに取り込むには ``git merge`` を行えば良い。
- ``git fetch`` → ``git merge`` の一連の流れは ``git pull`` コマンドで行うことができる。

git push
--------
ここまで紹介した方法で、異なる場所にあるレポジトリを連携させることができるようになりました。
しかし今まで紹介した、お互いのレポジトリーからコミットを読み込んでマージするという方法は

- アリスのコンピュータの電源が落ちているなどの理由でアリスのレポジトリにアクセス出来ないと共同作業が出来ない。
- チャーリーが作業に参加するとアリスは、ボブとチャーリのレポジトリそれぞれからコミットを git pull しなければなりません。
  更に参加者が増えると読み込むレポジトリが参加人数に比例して増えてしまい破綻してしまいます。

のような問題があり実際に日常の業務で使うのには現実的でありません。
この問題を解決する git の運用方法は複数存在しますが、1つの単純な解決方法は共有のレポジトリを1つ用意して作業に参加する人が各自のローカルレポジドリに共有レポジトリからコミットを読み込み、ローカルレポジドリに作成したコミットを共有レポジトリに書き込むことです。
これを実現するには今まで述べてきたリモートレポジトリからコミットを読み込む方法に加えて、リモートレポジトリに対して手元のコミットを書き込む方法も必要になります。
このコミットをリモートレポジトリに書き込むための手段が ``git push`` です。

.. image:: https://docs.google.com/drawings/d/1-_EHaRYe_WWE-Jhg8HBESQSG10DqeZOqaurQVKzec4U/pub?w=1040&amp;h=499
   :height: 249px
   :width: 520px

共有用のレポジトリを作る
~~~~~~~~~~~~~~~~~~~~~~~~
まず共有用のレポジトリを作成しましょう。各々のユーザがコミットの書き込み (``git push``) を行うレポジトリは
`「裸」のレポジトリ（bare repository） <http://git-scm.com/docs/gitglossary/2.0.0#def_bare_repository>`_ である必要があります。
bare repository は作業ディレクトリのない（``.git`` ディレクトリのみ存在する） git レポジトリです。
bare レポジトリは git init に ``--bare`` オプションをつけて実行することで作成できます。
あるいは、 git clone で既存のレポジトリを複製する際に ``--bare`` オプションを付けることで 既存のレポジトリを bare レポジトリとして複製することも出来ます。
また bare レポジトリのディレクトリ名には `.git を末尾につけるのが慣習です <http://git-scm.com/docs/gitglossary/2.0.0#def_bare_repository>`_。

::

  $ cd /tmp/my/workingdir
  $ mkdir shared.git
  $ cd shared.git
  $ git init --bare
  Initialized empty Git repository in /private/tmp/my/workingdir/shared.git/

``ls`` で ``shared.git`` の中身を確認してみると、通常のレポジトリの ``.git`` ディレクトリの中身が保存されていることが分かります。

::

  $ ls
  HEAD        branches    config      description hooks       info        objects     refs

git push でコミットを書き込む
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
次にアリスの立場に手元のコミットを共有レポジトリに書き出してみましょう。まずは共有レポジトリをリモートとして登録します。

::

  $ cd /tmp/my/workingdir/alice
  $ git remote add shared /tmp/my/workingdir/shared.git

.. TODO(yunabe): .git suffix は省略可？

次に shared に対してコミットを書き込みます。コミットの書き込みには git push を利用します。

::

  $ git push <remote> <src>:<dst>

このコマンドを実行するとローカルレポジトリの <src> が指すコミットとその先祖のコミットを <remote> に対して書き込み、
同時に <remote> の <dst> が <src> と同じコミットを指すように変更します。

- <dst> ブランチが存在しない場合は <dst> ブランチが <remote> に作成されます。
- <dst> ブランチがすでに存在する場合には <dst> を <src> まで **fast-forward** します。fast-forward できない場合 （<dst> が <src> の祖先でない場合）には git push は **失敗** します。

アリスのレポジトリから共有レポジトリに対して、master ブランチを書き込んでみましょう

::

  $ git push shared master:master
  ounting objects: 15, done.
  Delta compression using up to 8 threads.
  Compressing objects: 100% (8/8), done.
  Writing objects: 100% (15/15), 1.32 KiB | 0 bytes/s, done.
  Total 15 (delta 0), reused 0 (delta 0)
  To /tmp/my/workingdir/shared.git
   * [new branch]      master -> master

これでアリスの master ブランチ（の指すコミットとその全ての先祖コミット）が shared に対して書き込まれ、shared に master ブランチが作成されます。図にすると以下な状態になります。

.. image:: https://docs.google.com/drawings/d/13zVdgJQz_qeApchPVReQtFUbmaEleLuJci2j035OBZ8/pub?w=1015&amp;h=1073
   :height: 536px
   :width: 507px

続いて新しいコミットを作ってそれも shared に push してみましょう。

::

  $ echo "Email: alice@example.com" >> alice.txt
  $ git commit -a -m "Added an email addr to alice.txt"
  [master c671712] Added an email addr to alice.txt
   1 file changed, 1 insertion(+)
  $ git push shared master:master
  Counting objects: 5, done.
  Delta compression using up to 8 threads.
  Compressing objects: 100% (2/2), done.
  Writing objects: 100% (3/3), 357 bytes | 0 bytes/s, done.
  Total 3 (delta 0), reused 0 (delta 0)
  To /tmp/my/workingdir/shared.git
     77c39e3..c671712  master -> master

.. image:: https://docs.google.com/drawings/d/1Qgia-UMx3KM3Ms1xbAfMyF53TQKLL8_E_EJya_k7zSM/pub?w=1335&amp;h=1069
   :height: 534px
   :width: 667px

push (fast-forward) に失敗した場合の対処法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
次にボブの立場になって共有レポジトリに新しいコミットを push してみましょう。
まず共有レポジトリを ``git remote add`` で登録します

::

  $ cd /tmp/my/workingdir/bo
  $ git remote add shared /tmp/my/workingdir/shared

続いて新しいコミットを作成します。

::

  $ echo "Email: bob@example.com" >> bob.txt
  $ git commit -a -m "Added an email addr to bob.txt"
  [master 99af642] Added an email addr to bob.txt
   1 file changed, 1 insertion(+)

これを ``git push`` してみましょう。そうするとエラーが発生してしまいます。

::

  $ git push shared master:master
  To /tmp/my/workingdir/shared.git
   ! [rejected]        master -> master (fetch first)
  error: failed to push some refs to '/tmp/my/workingdir/shared.git'
  hint: Updates were rejected because the remote contains work that you do
  hint: not have locally. This is usually caused by another repository pushing
  hint: to the same ref. You may want to first integrate the remote changes
  hint: (e.g., 'git pull ...') before pushing again.
  hint: See the 'Note about fast-forwards' in 'git push --help' for details.

前述したように ``git push <remote> <src>:<dst>`` は ``<remote>`` 上の ``<dst>`` (今回は ``shared`` 上の ``master``) を
``<src>`` (今回は ``bob`` の ``master``) が指しているコミットまで fast-forward します。
fast-forward 出来ない場合は失敗してしまいます。

fast-forward を可能にして ``push`` を行うためには、ローカルの ``master`` ブランチを ``shared`` の ``master`` とマージしてあげる必要があります。
前述したように ``git pull`` でマージしましょう (あるいは ``git fetch`` と ``git merge`` でもよい)。

::

  $ git pull shared master
  Merge made by the 'recursive' strategy.
   alice.txt | 1 +
   1 file changed, 1 insertion(+)

これで

::

  $ git push shared master:master
  Counting objects: 8, done.
  Delta compression using up to 8 threads.
  Compressing objects: 100% (4/4), done.
  Writing objects: 100% (5/5), 684 bytes | 0 bytes/s, done.
  Total 5 (delta 0), reused 0 (delta 0)
  To /tmp/my/workingdir/shared
     c671712..14245e3  master -> master
