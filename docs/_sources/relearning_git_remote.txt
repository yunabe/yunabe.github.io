Git リモート再入門
==================

.. container:: editdate

  更新 2014年6月10日

.. contents:: 目次
   :depth: 3
   :local:


この文書の目的
--------------
- 別の場所にあるレポジトリ（リモートレポジトリ）と連携する方法について再学習します。
- はじめに git remote, git fetch, git merge を使ってリモートレポジトリの内容を手元のレポジトリ（ローカルレポジトリ）に取り込む方法について学習します。
- 次に git fetch, git merge を使った一連の作業を自動的に行なってくれる git pull について学習します。
- 次に git push を使ってローカルレポジトリの内容をリモートレポジトリに書き出す方法について 学習します。
- 最後に, トラッキングブランチ (tracking branch) について理解し、 git pull, git push の引数を省略した際のデフォルトの挙動のルールについて学びます。

対象とする人
------------
- 入門本でリモート, push, pull について読んだけど何が「プッシュ」されてなにが「プル」されるのか、よく分からなかった人。
- `2.5 Git の基本 - リモートでの作業 <http://git-scm.com/book/ja/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%A7%E3%81%AE%E4%BD%9C%E6%A5%AD>`_ や
  `3.5 Git のブランチ機能 - リモートブランチ <http://git-scm.com/book/ja/Git-%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E6%A9%9F%E8%83%BD-%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81>`_ を読んで何となく分かったけれど、理解を再確認したい人。
- ``git pull`` と ``git push`` を使って1人で github を使ってるけど、実は ``git pull``, ``push`` が何をしているのかよく理解していない人。
- ``git pull/push`` と ``fetch/merge`` の関係を理解していない人
- ``git pull/push`` で 「fast-forwardナンタラカンタラ」とかエラーが出てもそれが何なの分かっていない人。
  それの解決方法 （例えば git fetch && git merge origin/master）が何故それでうまくいくのかきちんと説明できない人
- ``git push/pull`` の引数が省略された場合のデフォルトの動作を厳密に説明出来ない人
  「リモートトラッキングブランチ」と「トラキングブランチ」がそれぞれ何であるか説明できない人

下準備
------
アリスとボブが2人で自分たちの部門の紹介ページを作ろうとしてるとしています。アリスは git レポジトリーを作ってその上で部門の紹介ページの作成を開始しました。
まずはアリスになったつもりでレポジトリーを作成して、紹介ページを作ってコミットしましょう （``/tmp/my/workingdir`` は好きなディレクトリに置き換えて下さい）。

::

  $ cd /tmp/my/workingdir
  $ mkdir alice
  $ cd alice
  $ git init

これでレポジトリができました。まず自分の紹介ページを作ってコミットしましょう。

::

  $ echo "I’m Alice." >> alice.txt
  $ git add alice.txt
  $ git commit -m "Added alice.txt"

次にメンバー一覧ページも作ってコミットします。

::

  $ echo "Alice <alice.txt>" >> members.txt
  $ git add members.txt
  $ git commit -m "Added Alice to members.txt"

アリスが紹介ページを作り始めたのを知らずに、ボブも紹介ページを手元で作りはじめてしまいました。今度はボブになったつもりでレポジトリの作成とコミットを行います。

::

  $ cd /tmp/my/workingdir
  $ mkdir bob
  $ cd bob
  $ git init

  $ echo "I’m Bob." > bob.txt
  $ git add bob.txt
  $ git commit -m "Added bob.txt"

  $ echo "Bob <bob.txt>" > members.txt
  $ git add members.txt
  $ git commit -m "Added Bob to members.txt"

アリスとボブがそれぞれ手元で紹介ページをある程度作ったところで、アリスとボブはお互いが別々の場所で紹介ページの作成をしていたことに気が付きます。アリスとボブはそれぞれが手元で作ったコミットを相手と共有しなければなりません。こうしたケースに対処するために git では「リモート」という仕組みと、git fetch, pull, push といったコマンドが用意されています。

リモート (Remote)
-----------------
git では別の場所にあるレポジトリ（以下リモートレポジトリ）を手元のレポジトリ（以下ローカルレポジトリ）と連携させることができます。
リモートレポジトリとローカルレポジトリの連携により、リモートレポジトリにあるコミットをローカルレポジトリに持ってきたり、
逆にローカルレポジトリで行ったコミットをリモートレポジトリに書き出すことができます。

リモートレポジトリの登録と読み込み
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
リモートレポジトリ と連携するために、まずローカルレポジトリにリモートレポジトリを登録する必要があります。
リモートレポジトリの登録には ``git remote add`` を利用します。

::

  git remote add <name> <URL>

現在ローカルレポジトリに登録されているリモートレポジトリの一覧は git remote で確認することができます。
各 remote の、例えばURLなどの、詳細な情報 は ``git remote show <remote>`` で確認できます。

リモートレポジトリにあるコミットを読み込んでみましょう。リモートレポジトリにあるコミットは ``git fetch <remote>`` でローカルレポジトリにロードすることができます。
git fetch でコミットをロードすると、リモートレポジトリ上のブランチに対応する「リモートトラキングブランチ」という特殊なブランチが自動的に作成されます（ブランチはコミットに対するポインタであることに注意して下さい）。
リモートトラッキングブランチの名前は ``<remote>/<branch>`` という名前になります。現在のレポジトリにあるリモートトラッキングブランチの一覧は ``git branch -r`` で確認できます。

.. TODO(yunabe): 存の branch と衝突すると?

アリスとボブのケースに戻りましょう。ボブはアリスが紹介ページを自分の作っているものにマージすることにしました。
ボブはアリスのレポジトリー上のコミットを取り込むために、まずアリスのレポジトリを自分のレポジトリに「リモートレポジトリ」として登録します。

::

  $ cd /tmp/my/workingdir/bob
  $ git remote add alice /tmp/my/workingdir/alice

  $ git remote
  alice
  $ git remote show alice

次にアリスのレポジトリをフェッチします。

::

  $ git fetch alice

  $ git branch -r

bob のレポジトリの状態を図を書くと次のようになります。
レポジトリ alice からコミットがコピーされており、master ブランチの代わりに ``alice/master`` という「リモートトラッキングブランチ」が作成されていることに注意して下さい。

リモートトラキングブランチを扱う
--------------------------------
これで ``git remote add`` と ``git fetch`` で別の場所にあるレポジトリを登録し、そこからコミットを読み込むことができました。
その際にリモートレポジトリ上のブランチに対応する ``<remote>/<branch>`` という名前の「リモートトラキングブランチ」が自動的に作られることが分かりました。

「リモートトラッキングブランチ」(e.g. ``origin/master``) は通常のブランチ (e.g. master) やHEAD, HEAD^, コミットのハッシュID (198bc17aade),
タグと同様に手元のレポジトリに保存されているコミットに対するポインタです。
そのため前章で学んだような git checkout, git merge, git branch のようなコマンドはリモートトラッキングブランチに対しても変わらず利用できます。

::

  git log alice/master

でボブはリモートレポジトリ（アリスのレポジトリ）上の ``master`` ブランチのログを見ることができます。

::

  git checkout alice/master

とするとボブはアリスのレポジトリの ``master`` ブランチの最新の状態を再現することができます （``detached HEAD`` となってこのままでは作業できないことに注意）。

リモートトラッキングブランチとマージする
----------------------------------------
次にリモートトラッキングブランチ（リモートレポジトリ上のブランチ）をローカルのブランチにマージしてみましょう。
これはローカルでブランチをマージした場合と全く同じようにできます。

ボブはアリスの master ブランチを自分の master ブランチにマージすることにしました。
マージしようとしている2つのコミットに共通する先祖が存在しない点が、ローカルのみで作業していた場合と少し違いますが、
これはファイルが何もない「初期状態」が共通の親として暗黙的存在すると考えれば特に問題はないかと思います。

::

  $ git checkout master
  $ git merge alice/master

members.txt はアリスとボブ両方のレポジトリで編集されていたのでコンフリクトが発生します。
適当にコンフリクトを解消します。このあたりの作業もローカルのブランチをマージする場合となにも変わりません。

::

  $ git commit -m "Merged changes in alice to bob"

これで無事、ボブはアリスが行った変更を自分のレポジトリに取り込むことができました。ボブのレポジトリの状態は図で書くと以下のようになります
