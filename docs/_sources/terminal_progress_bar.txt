ターミナルにプログレスバーを表示する方法
========================================
ターミナルに用意されている特殊な制御コード (エスケープシーケンス) を使用して、
Python, Ruby, C++, Java など言語に関係なく簡単にターミナルにプログレスバーを表示することができます。

仕組み
------
::

  [==>          ] 25.2%

プログレスバーが更新されるたびに新しい行が表示されるのを防ぐために、
プログレスバーを表示する前にカーソルを行頭に戻して行の内容を消してしまえればプログレスバーの完成です。
カーソルの制御と行の削除には

- `キャリッジ・リターン (carriage return) <http://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%AA%E3%83%83%E3%82%B8%E3%83%BB%E3%83%AA%E3%82%BF%E3%83%BC%E3%83%B3>`_
- `ターミナルのエスケープシーケンス <http://www.termsys.demon.co.uk/vtansi.htm>`_ を利用します。

の２つを利用します。
キャリッジ・リターンは Windows の改行文字 ``\r\n`` で出てくる ``\r`` です。
普段 ``\n`` に余計についてくる邪魔な文字程度の認識しかないと思いますが、単体で利用するとカーソルの位置を行頭に移動します。
移動した後文字を出力するとすでに表示されている文字を上書きして新しい文字を表示します。
例えば ``"abcdefg\r123"`` のような文字列を出力すると ``\r`` でカーソルを行頭に戻した後 ``abc`` を ``123`` で上書きするので
``123defg`` が表示されます。
そのためプログレスバーの長さが短くならないなら実はキャリッジ・リターンだけで十分で、エスケープシーケンスは使わなくても問題ありません。

次にエスケープシーケンス。GUIの時代になって馴染みがないと思いますが、`<ESC>` に続けて決められた特殊な文字列を出力することで文字の色の変更、
表示されている文字の削除などの制御することができます。
`<ESC>` は `ASCII文字コード <http://ja.wikipedia.org/wiki/ASCII>`_ の十進数で ``27`` のコードです (16進数で ``1b``, 8進数で ``33``)。
この文字に続けて ``[K`` や ``[94m`` などの文字列を与えることでターミナルを制御することができます (`エスケープシーケンスの一覧 <http://www.termsys.demon.co.uk/vtansi.htm>`_)。
行の削除のエスケープシーケンスは `<ESC>[94m` です。

実装
----
::

  [=========>   ] 72.3%

基本的には ``\r`` と `<ESC>[94m` を標準出力に書き出して、その後に ``"[====>  ] 70%"`` のようなプログレスバーを表す文字列を書くだけです。
ただし **プログレスバーの文字の後で改行してしまわないように注意** して下さい。
例えば、Python では ``print`` ではなくて ``sys.stdout.write`` を使わなくてはならないし、
Javaでは ``println`` ではなくて ``print`` を使わなくてはなりません。

Python
~~~~~~

::

  sys.stdout.write('\r\033[K' + get_progressbar_str(progress))
  sys.stdout.flush()

